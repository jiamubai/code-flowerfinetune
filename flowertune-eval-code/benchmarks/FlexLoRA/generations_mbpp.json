[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, char):\n    # Find the index of the first occurrence of the character\n    first_occurrence = string.find(char)\n    \n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return string\n    \n    # Remove the first occurrence by slicing the string\n    modified_string = string[:first_occurrence] + string[first_occurrence+1:]\n    \n    # Find the index of the last occurrence of the character in the modified string\n    last_occurrence = modified_string.rfind(char)\n    \n    # If the character is not found, return the modified string\n    if last_occurrence == -1:\n        return modified_string\n    \n    # Remove the last occurrence by slicing the string again\n    final_string = modified_string[:last_occurrence] + modified_string[last_occurrence+1:]\n    \n    return final_string\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(mat):\n    # Sort the matrix based on the sum of each row\n    mat.sort(key=sum)\n    return mat\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\nfrom collections import Counter\n\ndef count_common(words):\n    # Count the occurrences of each word using Counter\n    word_count = Counter(words)\n    \n    # Sort the items by frequency and then alphabetically\n    sorted_word_count = sorted(word_count.items(), key=lambda x: (-x[1], x[0]))\n    \n    return sorted_word_count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base, height, length):\n    # Calculate the area of the triangular base\n    area = (base * height) / 2\n    \n    # Calculate the volume by multiplying the area with the length\n    volume = area * length\n    \n    return volume\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\nimport re\n\ndef split_lowerstring(text):\n    # Split the string at lowercase letters using regular expression\n    return (re.findall('[a-z][^a-z]*', text))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_lowercase_underscore(text):\n    # Define the regex pattern for lowercase letters separated by an underscore\n    patterns = '\\w+[A-Za-z]_[a-z]+$'\n    \n    # Search for the pattern in the given text\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    # Calculate the perimeter by multiplying the side length by 4\n    return (side * 4)\n\n# Test the function with an example"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    # Create a set of characters from str2 for quick lookup\n    dirty = set(str2)\n    \n    # Use list comprehension to filter out characters present in str2\n    result = [char for char in str1 if char not in dirty]\n    \n    # Join the filtered characters back into a string and return\n    return ''.join(result)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    # Convert the list to a set and compare its length to the original list's length\n    return len(set(arr)) != len(arr)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\nfrom math import log2\n\n\ndef is_woodall(n):\n    # Check if n is even and greater than 2\n    if n % 2 == 0:\n        return False\n    \n    # Calculate k as (n + 1) / 2\n    k = (n + 1) // 2\n    \n    # Check if log base 2 of k is an integer\n    if log2(k).is_integer():\n        return True\n    \n    return False\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\nfrom typing import List\n\ndef multiples_of_num(m: int, n: int) -> List[int]:\n    # Generate the list of multiples using list comprehension\n    return [n * i for i in range(1, m + 1)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nfrom collections import defaultdict\n\ndef find_first_duplicate(arr):\n    # Create a dictionary to store the count of each element\n    count = defaultdict(int)\n    \n    # Iterate through each element in the array\n    for i in arr:\n        # Increment the count of the current element\n        count[i] += 1\n        \n        # Check if the count of the current element is greater than 1\n        if count[i] > 1:\n            return i\n    \n    # If no duplicates are found, return -1\n    return -1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(list):\n    # Find the maximum sum by iterating through each sublist and summing its elements\n    return max(sum(sublist) for sublist in list)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    # Initialize variables for the result and power of 2\n    dec_value = 0\n    i = 0\n    \n    # Iterate through each digit in the binary number from right to left\n    while (binary != 0):\n        # Get the last digit of the binary number\n        bit = binary % 10\n        \n        # Add the value of the current bit multiplied by 2 raised to the power of i\n        dec_value += bit * pow(2, i)\n        \n        # Remove the last digit from the binary number\n        binary //= 10\n        \n        # Increment the power of 2\n        i += 1\n    \n    return dec_value\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr,n):\n    prod = 1\n    for i in range(n):\n        # Check if the element is unique\n        if arr.count(arr[i]) == 1:\n            prod *= arr[i]\n    return prod\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nfrom collections import Counter\n\ndef check_k_elements(test_list, K):\n    # Count occurrences of each element in the tuples\n    res = Counter([ele for sub in test_list for ele in sub])\n    \n    # Check if any element occurs more than K times\n    for key, val in res.items():\n        if val > K:\n            return False\n    return True\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\nimport re\n\ndef remove(lst):\n    # Use regular expression to find and replace digits with an empty string\n    return [re.sub(r'\\d+', '', i) for i in lst]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\nfrom math import factorial as fact\n\ndef binomial_Coeff(n, k):\n    # Calculate the binomial coefficient using factorials\n    return int(fact(n) / (fact(k) * fact(n - k)))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\nfrom collections import defaultdict\n\n\ndef get_Odd_Occurrence(arr, n):\n    # Create an empty dictionary\n    count = defaultdict(int)\n\n    # Traverse through array elements and count frequencies\n    for i in range(0, n):\n        count[arr[i]] += 1\n\n    # Traverse through dictionary and return first element with odd count\n    for (key, value) in count.items():\n        if (value % 2 != 0):\n            return key\n\n    # If no such element exists\n    return -1\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\nfrom collections import defaultdict\n\ndef count_Substring_With_Equal_Ends(str1):\n    result = 0\n    n = len(str1)\n    \n    # Count of each character in the string\n    char_count = defaultdict(int)\n    \n    for i in range(n):\n        # Add all substrings ending at i\n        result += (i + 1)\n        \n        # If substring is already present, add its frequency\n        if str1[i] in char_count:\n            result += char_count[str1[i]]\n        \n        # Increase the count of current character\n        char_count[str1[i]] += 1\n    \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom collections import defaultdict\nimport heapq\n\ndef func(arr,k):\n    # Create a dictionary to store the frequency of each integer\n    freq = defaultdict(int)\n    \n    # Iterate through each list in the input array\n    for l in arr:\n        # Increment the frequency count for each integer in the list\n        for i in l:\n            freq[i] += 1\n    \n    # Use a min-heap to keep track of the top k frequent elements\n    h = []\n    for key, value in freq.items():\n        # Push the negative frequency and the element into the heap\n        heapq.heappush(h, (-value, key))\n        \n        # If the heap size exceeds k, remove the smallest element\n        if len(h) > k:\n            heapq.heappop(h)\n    \n    # Extract the elements from the heap and return them as a list\n    res = []\n    while h:\n        res.append(heapq.heappop(h)[1])\n    \n    # Return the result in reverse order (most frequent first)\n    return res[::-1]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    # Initialize the maximum prime factor variable\n    max_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    \n    # Now n must be odd, so we can skip one element (Note i = i +2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, save i and divide n\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    \n    return max_prime\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    # Convert the decimal number to binary using bin() and remove the '0b' prefix\n    return int(bin(n).replace(\"0b\", \"\"))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, n):\n    # Initialize start and end indices\n    start = 0\n    end = n - 1\n    \n    # Perform binary search\n    while start <= end:\n        mid = (start + end) // 2\n        \n        # Check if the middle element is at its correct position\n        if arr[mid] != mid + 1 and (mid == 0 or arr[mid - 1] == mid):\n            return mid + 1\n        \n        # If the first half is sorted\n        if arr[mid] == mid + 1:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    # If no missing number found, return n+1\n    return n + 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\nfrom math import sqrt\n\ndef find_rect_num(n):\n    # Calculate the n-th rectangular number using the formula\n    return int((n * (n + 1)) / 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\nfrom fractions import Fraction\n\ndef find_Nth_Digit(num1, num2, N):\n    # Create a Fraction object with the given numerator and denominator\n    frac = Fraction(num1, num2)\n    \n    # Convert the fraction to a string representation\n    str_frac = str(frac)\n    \n    # Remove any decimal points or parentheses from the string\n    str_frac = str_frac.replace('.', '').replace('(', '').replace(')', '')\n    \n    # Check if the length of the string is less than N\n    if len(str_frac) < N:\n        return -1\n    \n    # Return the Nth digit (0-indexed)\n    return int(str_frac[N-1])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\nfrom operator import itemgetter\n\ndef sort_mixed_list(mixed):\n    # Separate and sort integer and string parts\n    int_part = sorted([i for i in mixed if isinstance(i, int)])\n    str_part = sorted([i for i in mixed if isinstance(i, str)])\n    \n    # Combine the sorted parts\n    return int_part + str_part\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\nfrom operator import truediv\n\ndef div_even_odd(nums):\n    # Find the index of the first even number using next() with filter()\n    first_even = next((i for i in range(len(nums)) if nums[i] % 2 == 0), -1)\n    \n    # Find the index of the first odd number using next() with filter()\n    first_odd = next((i for i in range(len(nums)) if nums[i] % 2 != 0), -1)\n    \n    # Check if both indices are valid (i.e., not -1) before performing division\n    return truediv(nums[first_even], nums[first_odd]) if first_even != -1 and first_odd != -1 else None\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\nfrom collections import defaultdict\n\ndef rearange_string(str1):\n    # Create a dictionary to store character frequencies\n    char_freq = defaultdict(int)\n    \n    # Count the frequency of each character in the string\n    for char in str1:\n        char_freq[char] += 1\n    \n    # Find the maximum frequency and its corresponding character\n    max_freq = 0\n    char_with_max_freq = ''\n    for char, freq in char_freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            char_with_max_freq = char\n    \n    # If the maximum frequency is more than half the length of the string (rounded up),\n    # it's not possible to rearrange the string as required\n    if max_freq > (len(str1) + 1) // 2:\n        return \"Not Possible\"\n    \n    # Create a result list with double the size of the input string\n    res = [None] * len(str1)\n    \n    # Place the character with the maximum frequency at even indices\n    index = 0\n    while max_freq > 0:\n        res[index] = char_with_max_freq\n        index += 2\n        max_freq -= 1\n    \n    # Remove the character with the maximum frequency from the dictionary\n    del char_freq[char_with_max_freq]\n    \n    # Place the remaining characters in the result list\n    for char, freq in char_freq.items():\n        while freq > 0:\n            if index >= len(res):\n                index = 1  # Start filling odd indices if all even indices are filled\n            res[index] = char\n            index += 2\n            freq -= 1\n    \n    # Join the list into a string and return\n    return ''.join(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists and count the frequency of each element\n    return Counter([element for sublist in list_of_lists for element in sublist])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(nums):\n    # Use the filter() function with a lambda function to filter out odd numbers\n    result = list(filter(lambda x: (x % 2 == 0), nums))\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr,n):\n    # Initialize sum to store the result\n    Sum = 0\n    \n    # Traverse through all elements\n    for i in range(n):\n        # Check if current element is repeated or not\n        if arr.count(arr[i]) > 1:\n            # Add it to the result\n            Sum += arr[i]\n    \n    # Return the final sum\n    return Sum\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    # Define the regex pattern for lowercase letters separated by an underscore\n    patterns = '\\w+_\\w+'\n    \n    # Search for the pattern in the given text\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\nimport re\n\n# Function to match a word at the beginning of a string\ndef text_match_string(text):\n    # Regular expression pattern to match a word at the beginning\n    patterns = '^\\w+'\n    \n    # Search for the pattern in the given text\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nfrom math import gcd\n\n\ndef get_gcd(arr):\n    # Initialize gcd with the first element\n    result = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Update gcd using the current element and the previous gcd\n        result = gcd(result, arr[i])\n        \n        # If gcd becomes 1, return immediately as it's the smallest possible gcd\n        if result == 1:\n            return 1\n    \n    # Return the final gcd value\n    return result\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    # Check if the length of the list is equal to the length of the set created from the list\n    return len(nums) == len(set(nums))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    # If a is greater than or equal to b, return 0 as the result will be divisible by 10\n    if (a >= b):\n        return 0\n    \n    # Initialize result variable to store the last digit\n    res = 1\n    \n    # Iterate from a+1 to b and multiply each number with the result modulo 10\n    for i in range(a + 1, b + 1):\n        res = (res * i) % 10\n    \n    # Return the last digit of the product\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(n):\n    # Initialize variables for the mask and result\n    mask = 0\n    result = n\n    \n    # Create a mask with all odd bits set to 1\n    while (mask < n):\n        mask = (mask << 1) | 1\n    \n    # Use bitwise OR to set all odd bits in the result\n    return (result | mask)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nfrom operator import itemgetter\n\ndef specified_element(test_list, K=0):\n    # Extract the specified element (default is the first element) from each sublist\n    res = [sub[K] for sub in test_list]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nfrom functools import reduce\n\ndef min_length_list(test_list):\n    # Find the list with the minimum length\n    res = reduce(lambda x, y: x if len(x) < len(y) else y, test_list)\n    # Return the length of the minimum list and the list itself\n    return (len(res), res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a,b,c):\n    # Check if all sides are equal\n    if (a == b) and (b == c):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base, height):\n    # Calculate the area using the formula: base * height\n    return base * height\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str1):\n    # Check if the first and last character of the string are the same\n    if str1[0] == str1[-1]:\n        return (\"Equal\")\n    else:\n        return (\"Not Equal\")\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\nfrom collections import defaultdict\n\n\ndef counting_sort(arr):\n    # Find the maximum value in the array\n    max_val = max(arr)\n    \n    # Initialize a count dictionary with default values set to 0\n    count_dict = defaultdict(int)\n    \n    # Count each element's frequency and store it in the dictionary\n    for num in arr:\n        count_dict[num] += 1\n    \n    # Reconstruct the sorted array based on the counts\n    sorted_arr = []\n    for num in range(max_val + 1):\n        sorted_arr.extend([num] * count_dict[num])\n    \n    return sorted_arr\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\nimport math\n\n\ndef tn_gp(a, n, r):\n    # Calculate the nth term of the geometric progression\n    return (a * (math.pow(r, n - 1)))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(n):\n    # Calculate the reverse of the number\n    rev = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        rev = rev * 10 + digit\n        temp //= 10\n    \n    # Check if the number is one less than twice its reverse\n    return (2 * rev - 1 == n)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\nfrom functools import cmp_to_key\n\n\ndef compare(a, b):\n    return int(b + a) - int(a + b)\n\n\ndef find_Max_Num(arr, n):\n    arr = sorted(arr, key=cmp_to_key(compare))\n    result = \"\"\n    for i in range(n):\n        result += str(arr[i])\n    return int(result)\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x, y):\n    # Check if the product of x and y is negative\n    return (x ^ y) < 0\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    # Calculate the nth octagonal number using the formula\n    return n * (3 * n - 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\nfrom collections import defaultdict\n\ndef max_len_sub(arr, n):\n    # Create a dictionary to store the maximum length subsequence ending with each element\n    dp = defaultdict(lambda: 1)\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # Check all previous elements to find subsequences with the same difference\n        for j in range(i):\n            if arr[i] - arr[j] == arr[j] - arr[j - 1]:\n                dp[arr[i]] = max(dp[arr[i]], dp[arr[j]] + 1)\n    \n    # Return the maximum length found in the dictionary\n    return max(dp.values())\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(str, n):\n    # Dictionary to store the frequency of prefix sums\n    mp = {}\n    \n    # Initialize variables for prefix sum and count of valid substrings\n    prefix_sum = 0\n    count = 0\n    \n    # Iterate through each character in the string\n    for i in range(n):\n        # Update the prefix sum by adding the current digit\n        prefix_sum += int(str[i])\n        \n        # If the prefix sum equals the current index (length), increment the count\n        if prefix_sum == i + 1:\n            count += 1\n        \n        # Check if there is a previous prefix sum that matches the current one minus the current index\n        if (prefix_sum - (i + 1)) in mp:\n            count += mp[prefix_sum - (i + 1)]\n        \n        # Update the dictionary with the current prefix sum\n        if prefix_sum in mp:\n            mp[prefix_sum] += 1\n        else:\n            mp[prefix_sum] = 1\n    \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(numbers):\n    # Initialize the smallest number with the first element of the list\n    small = numbers[0]\n    \n    # Iterate through each number in the list starting from the second element\n    for i in range(1, len(numbers)):\n        # Update the smallest number if a smaller number is found\n        if numbers[i] < small:\n            small = numbers[i]\n    \n    # Return the smallest number found\n    return small\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    # Calculate the absolute difference for each pair and return the maximum value\n    res = max(abs(x - y) for x, y in test_list)\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    # Sort the list of tuples based on the second element (marks) in each tuple\n    return sorted(marks, key=lambda x: x[1])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\nfrom operator import add\n\n\ndef recursive_list_sum(lst):\n    # Base case: if the list is empty, return 0\n    if not lst:\n        return 0\n    \n    # Recursive case: sum the first element with the sum of the rest of the list\n    return add(lst[0], recursive_list_sum(lst[1:]))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(list):\n    # Initialize counter for positive numbers\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in list:\n        # Check if the number is positive\n        if num > 0:\n            # Increment the counter if it's positive\n            count += 1\n            \n    # Return the total count of positive numbers\n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nfrom math import factorial\n\ndef binomial_coefficient(n, k):\n    # Calculate the binomial coefficient using factorials\n    return int(factorial(n) / (factorial(k) * factorial(n - k)))\n\ndef bell_number(n):\n    # Initialize an array to store Bell numbers\n    bell = [0] * (n + 1)\n    \n    # Base case: B_0 is 1\n    bell[0] = 1\n    \n    # Compute Bell numbers using the recursive formula\n    for i in range(1, n + 1):\n        bell[i] = sum(binomial_coefficient(i - 1, j) for j in range(i))\n    \n    # Return the nth Bell number\n    return bell[n]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(l1,l2):\n    return all(item in l1 for item in l2)\n    \n# Test case"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\nfrom typing import List, Tuple\n\ndef get_equal(test_list: List[Tuple], K: int) -> str:\n    # Check if all tuples in the list have the same length as K\n    res = all(len(sub) == K for sub in test_list)\n    \n    # Return the appropriate message based on the result\n    return 'All tuples have same length' if res else 'Not All tuples have same length'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap for the next comb\n        gap = int(gap / shrink_factor)\n\n        if gap <= 1:\n            gap = 1\n            sorted = True  # If gap is 1, it's time to do a final check\n\n        index = 0\n        while index + gap < len(arr):\n            if arr[index] > arr[index + gap]:\n                # Swap elements\n                arr[index], arr[index + gap] = arr[index + gap], arr[index]\n                sorted = False  # If we made a swap, set sorted to False\n            index += 1\n\n    return arr\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    # Check if n is odd or divisible by 4\n    return (n & 3 != 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(text):\n    # Split the text using multiple delimiters: newline, asterisk, and space\n    return re.split(r'\\n|\\*| ', text)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\nfrom collections import defaultdict\n\ndef is_samepatterns(colors, patterns):\n    # Create dictionaries to map colors and patterns\n    color_map = defaultdict(str)\n    pattern_map = defaultdict(str)\n    \n    for i in range(len(colors)):\n        # Check if the current color maps to a different pattern\n        if color_map[colors[i]] != '' and color_map[colors[i]] != patterns[i]:\n            return False\n        \n        # Check if the current pattern maps to a different color\n        if pattern_map[patterns[i]] != '' and pattern_map[patterns[i]] != colors[i]:\n            return False\n        \n        # Map the current color to the current pattern\n        color_map[colors[i]] = patterns[i]\n        \n        # Map the current pattern to the current color\n        pattern_map[patterns[i]] = colors[i]\n    \n    return True\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\nfrom functools import reduce\n\ndef find_tuples(test_list, K):\n    # Check if all elements in each tuple are divisible by K\n    res = [tuple_val for tuple_val in test_list if reduce(lambda x, y: x and y % K == 0, tuple_val)]\n    return str(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(m,n):\n    # If m is smaller than n, swap them\n    if (m < n):\n        m, n = n, m\n\n    # Calculate total squares using the formula\n    return int((n * (n + 1) * (2 * n + 1) / 6) + ((m - n) * n * (n + 1) / 2))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(n):\n    # Initialize sums for even and odd digits\n    SumOdd = 0\n    SumEven = 0\n    \n    # Iterate through each digit in the number\n    while n > 0:\n        rem = n % 10\n        \n        # Check if the digit is even or odd and add to respective sum\n        if rem % 2 == 0:\n            SumEven += rem\n        else:\n            SumOdd += rem\n        \n        # Remove the last digit from the number\n        n //= 10\n    \n    # Calculate the absolute difference between the two sums\n    diff = abs(SumEven - SumOdd)\n    \n    # Return True if the difference is not zero, otherwise False\n    return diff != 0\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number of set bits is odd\n        if bin(i).count('1') % 2 != 0:\n            # Increment count if true\n            count += 1\n            \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    # Check if the length of the word is even\n    return len(word) % 2 == 0\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\nfrom math import factorial\n\n\ndef tetrahedral_number(n):\n    # Calculate the nth tetrahedral number using the formula\n    return (factorial(n + 2)) / (factorial(3) * factorial(n - 1))\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\nfrom itertools import zip_longest\n\ndef zip_tuples(test_tup1, test_tup2):\n    # Use zip_longest to handle tuples of different lengths\n    res = list(zip_longest(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    # Calculate the volume using the formula (4/3) * pi * r^3\n    return (4 / 3) * math.pi * radius ** 3\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(str1):\n    # Calculate the ASCII value of the first character\n    char = ord(str1[0])\n    \n    # Iterate through the rest of the characters in the string\n    for i in range(1, len(str1)):\n        # Add the ASCII values of all characters together\n        char += ord(str1[i])\n    \n    # Convert the resulting ASCII value back to a character\n    return chr(char)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    # Base cases for the first two numbers in the sequence\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize an array to store the sequence values\n    arr = [0] * (n + 1)\n    \n    # Set the first two elements of the sequence\n    arr[1], arr[2] = 1, 1\n    \n    # Fill the array using the Newman-Conway formula\n    for i in range(3, n + 1):\n        arr[i] = arr[arr[i - 1]] + arr[i - arr[i - 1]]\n    \n    # Return the n-th element of the sequence\n    return arr[n]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\n\ndef surfacearea_sphere(r):\n    # Calculate the surface area using the formula 4 * pi * r^2\n    return (4 * math.pi * pow(r, 2))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    # Formula to calculate the nth centered hexagonal number\n    return 3 * n * (n - 1) + 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\nfrom collections import Counter\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Merge the three dictionaries using Counter from collections\n    merged_dict = Counter(dict1) + Counter(dict2) + Counter(dict3)\n    \n    # Convert the Counter back to a dictionary and return it\n    return dict(merged_dict)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\nfrom collections import defaultdict\n\ndef freq_count(nums):\n    # Create a defaultdict with default value as 0\n    freq_dict = defaultdict(int)\n    \n    # Iterate over each number in the list and update its frequency\n    for num in nums:\n        freq_dict[num] += 1\n    \n    return dict(freq_dict)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    # Subtract 1 from the input number to get the closest smaller number\n    return (n - 1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    # Find the maximum length among all words in the list\n    return max(len(word) for word in words)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list1, s):\n    # Check if any element in the list contains the substring 's'\n    return any(s in i for i in list1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\nfrom itertools import cycle\n\ndef is_undulating(num):\n    # Check if the length of the number is even and greater than 2\n    if len(num) % 2 == 0 and len(num) > 2:\n        # Get the first two characters as the repeating pattern\n        pattern = num[:2]\n        # Create an iterator for the repeating pattern\n        gen = cycle(pattern)\n        # Check if all characters in the number match the repeating pattern\n        return all(next(gen) == d for d in num)\n    else:\n        # If the length is not even or less than or equal to 2, it's not undulating\n        return False\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    # Base case: if exponent is 0, return 1\n    if (b == 0):\n        return 1\n    # If exponent is negative, compute the positive exponent and take the reciprocal\n    elif (b < 0):\n        return 1 / power(a, -b)\n    else:\n        # Recursive case: multiply the base with the result of power(a, b-1)\n        return a * power(a, b - 1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\nfrom operator import itemgetter\n\ndef index_minimum(test_list):\n    # Find the index of the tuple with the minimum second element\n    res = min(test_list, key=itemgetter(1))[0]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    # Use the min function with a generator expression to find the minimum length of sublists\n    return min(len(x) for x in lst)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    # Initialize count of divisors\n    c = 0\n    \n    # Iterate through possible divisors\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            c += 1\n            \n    return c\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\nfrom collections import Counter\n\ndef frequency_lists(lists):\n    # Flatten the list of lists and count the frequency of each element\n    return dict(Counter([i for sublist in lists for i in sublist]))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\nfrom functools import reduce\n\ndef multiply_num(nums):\n    # Calculate the product of all numbers in the list using reduce\n    total = reduce((lambda x, y: x * y), nums)\n    # Divide the product by the length of the list\n    return total / len(nums)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    # Convert the decimal number to binary and remove the '0b' prefix\n    return bin(n).replace(\"0b\", \"\")\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    # Convert the number to a string and check if it's already a palindrome\n    for i in range(num + 1, num + 1000):  # Limiting the search to a reasonable range\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            return i\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nfrom heapq import nlargest\n\ndef kth_element(arr, n, k):\n    # Find the k largest elements in the array\n    k_largest = nlargest(k, arr)\n    \n    # Return the k-th smallest element (index k-1 in the sorted list)\n    return k_largest[k - 1]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\nimport re\n\ndef snake_to_camel(word):\n    # Split the word by underscore and capitalize each segment\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\nfrom math import factorial\n\n\ndef eulerian_num(n, m):\n    # Calculate the Eulerian number using the formula\n    return int(factorial(n + 1) / (factorial(m) * factorial(n - m + 1)))\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(test_list):\n    # Using sorted() with a lambda function to sort each sublist\n    res = [sorted(sub, key=lambda ele: (len(ele), ele)) for sub in test_list]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    # Count and return the number of True values in the list\n    return lst.count(True)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\nfrom typing import List, Tuple\n\ndef add_lists(lst: List[int], tpl: Tuple[int]) -> Tuple[int]:\n    # Convert the tuple to a list and concatenate with the original list\n    result = list(tpl) + lst\n    # Convert the result back to a tuple and return\n    return tuple(result)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    # Count the number of integers in the range that are divisible by 16\n    return len([i for i in range(start, end + 1) if i % 16 == 0])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom heapq import merge\n\ndef merge_sorted_list(*args):\n    # Merge all sorted iterables and return an iterator over the merged result\n    return list(merge(*args))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(str, n):\n    # Initialize result as 0\n    res = 0\n    \n    # Traverse through all bits\n    for i in range(n):\n        if (str[i] == '1'):\n            # Add number of rotations ending at str[i]\n            res += i + 1\n    \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\nfrom bisect import bisect_left\n\ndef extract_missing(ranges, start_range, end_range):\n    # Sort the input ranges\n    sorted_ranges = sorted(ranges)\n    \n    # Initialize the result list with the initial range\n    result = [(start_range, sorted_ranges[0][0])]\n    \n    # Iterate through the sorted ranges to find gaps\n    for i in range(len(sorted_ranges) - 1):\n        if sorted_ranges[i][1] < sorted_ranges[i + 1][0]:\n            result.append((sorted_ranges[i][1], sorted_ranges[i + 1][0]))\n    \n    # Add the final range after the last sorted range\n    result.append((sorted_ranges[-1][1], end_range))\n    \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\nfrom collections import Counter\n\ndef common_in_nested_lists(nested_list):\n    # Count the occurrences of each element in all sublists\n    count = Counter(x for sublist in nested_list for x in sublist)\n    \n    # Find elements that appear in every sublist (count equal to the number of sublists)\n    common_elements = [element for element, freq in count.items() if freq == len(nested_list)]\n    \n    return common_elements\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\nimport math\n\ndef perimeter(r, h):\n    # Calculate the circumference of the base circle\n    base_circumference = 2 * math.pi * r\n    \n    # Calculate the total perimeter by adding the circumferences of both bases and the height\n    total_perimeter = 2 * base_circumference + 2 * h\n    \n    return total_perimeter\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\nimport re\n\ndef check_integer(string):\n    # Regular expression pattern for matching integers\n    pattern = r\"^[+-]?\\d+$\"\n    \n    # Check if the string matches the pattern\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\nfrom collections import defaultdict\n\ndef assign_freq(test_list):\n    res = []\n    freq_map = defaultdict(int)\n    \n    # Count frequencies of elements\n    for sub in test_list:\n        for ele in sub:\n            freq_map[ele] += 1\n    \n    # Append frequency to each tuple\n    for sub in test_list:\n        temp = [ele for ele in sub]\n        temp.append(freq_map[sub[0]])\n        res.append(tuple(temp))\n    \n    return str(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\nfrom collections import defaultdict\n\ndef empty_dit(dict_list):\n    # Check if all dictionaries in the list are empty using all() and any()\n    return all(not d for d in dict_list)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(test_tup):\n    res = int(''.join(map(str, test_tup)))\n    return (res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\nfrom ast import literal_eval\n\ndef list_to_float(test_list):\n    # Convert each element in the list to float if it's convertible\n    res = [tuple(literal_eval(i) for i in sub) for sub in test_list]\n    return str(res)\n\n# Test the function with the provided test case"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    # Split the string by spaces and return the resulting list\n    return string.split(' ')"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, n):\n    # Initialize left and right pointers\n    left = 0\n    right = n - 1\n    \n    # Perform binary search\n    while (left <= right):\n        mid = int(left + (right - left) / 2)\n        \n        # Check if mid is at the beginning or end of the array\n        if (mid == 0 or arr[mid] != arr[mid - 1]):\n            if (mid == n - 1 or arr[mid] != arr[mid + 1]):\n                return arr[mid]\n            else:\n                left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If no such element is found, return -1\n    return -1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nfrom operator import mul\n\ndef max_product_tuple(test_list):\n    # Calculate the product of each pair using map and mul\n    res = max(map(mul, test_list))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\nfrom itertools import combinations\n\n\ndef check_triplet(arr, n, x, y):\n    # Generate all possible triplets using combinations\n    for i in combinations(arr, 3):\n        # Check if the sum of any two elements equals x and the third element equals y\n        if (i[0] + i[1] == x and i[2] == y) or (i[0] + i[2] == x and i[1] == y) or (\n                i[1] + i[2] == x and i[0] == y):\n            return True\n    return False\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nfrom math import sqrt\n\ndef smartNumber(n):\n    # Initialize an array to store the count of divisors for each number\n    arr = [0] * (n + 1)\n    \n    # Iterate through numbers from 2 to n\n    for i in range(2, n + 1):\n        # If the number is not already marked as having more than two divisors\n        if arr[i] == 0:\n            # Mark all multiples of i with one divisor\n            for j in range(i, n + 1, i):\n                arr[j] += 1\n    \n    # Find the first number with exactly three divisors\n    for i in range(2, n + 1):\n        if arr[i] == 3:\n            return i\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    # Helper function to calculate the sum of proper divisors of a number\n    def sum_of_divisors(x):\n        return sum([i for i in range(1, x) if x % i == 0])\n    \n    # Calculate the sum of all amicable numbers up to n\n    return sum([x for x in range(2, n + 1) if sum_of_divisors(x) != x and sum_of_divisors(sum_of_divisors(x)) == x])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nimport cmath\n\ndef angle_complex(x, y):\n    # Create a complex number from x and y\n    z = complex(x, y)\n    \n    # Calculate the angle (phase) of the complex number\n    angle = cmath.phase(z)\n    \n    return angle\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(string, length):\n    # Initialize variables to store the current sum and maximum sum\n    curr_sum = 0\n    max_sum = 0\n    \n    # Iterate through each character in the string\n    for i in range(length):\n        # If the character is '0', add 1 to curr_sum; otherwise, subtract 1\n        if (string[i] == '0'):\n            curr_sum += 1\n        else:\n            curr_sum -= 1\n        \n        # Update max_sum if curr_sum exceeds it\n        if (curr_sum > max_sum):\n            max_sum = curr_sum\n        \n        # Reset curr_sum to 0 if it becomes negative\n        if (curr_sum < 0):\n            curr_sum = 0\n    \n    return max_sum\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum(n, m):\n    # Initialize the sum of common divisors\n    s = 0\n    \n    # Iterate through all possible divisors up to the minimum of n and m\n    for i in range(1, min(n, m) + 1):\n        # Check if both n and m are divisible by i\n        if (n % i == 0) and (m % i == 0):\n            # Add the divisor to the sum\n            s += i\n            \n    return s\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a, b):\n    # If either number is zero, return 0\n    if (a == 0 or b == 0):\n        return 0\n    # If both numbers are negative, return the product of their absolute values\n    elif (a < 0 and b < 0):\n        return multiply_int(-a, -b)\n    # If one number is negative, return the negative of the product of their absolute values\n    elif (a < 0):\n        return -multiply_int(-a, b)\n    # If one number is negative, return the negative of the product of their absolute values\n    elif (b < 0):\n        return -multiply_int(a, -b)\n    # Base case: if b is 1, return a\n    elif (b == 1):\n        return a\n    # Recursive case: add a to the result of multiplying a with b-1\n    else:\n        return (a + multiply_int(a, b - 1))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\nfrom typing import List\n\ndef long_words(n: int, str1: str) -> List[str]:\n    # Split the input string into a list of words\n    words = str1.split(\" \")\n    \n    # Filter and return words that have length greater than n\n    result = [word for word in words if len(word) > n]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(arr):\n    n = len(arr)\n    magic_sum = sum(arr[0])\n\n    # Check rows for magic sum\n    for row in arr:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check columns for magic sum\n    for col in range(n):\n        if sum(arr[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals for magic sum\n    if sum(arr[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(arr[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    # Count the occurrences of each element in the list\n    counts = Counter(nums)\n    \n    # Find the element with the maximum occurrence and its count\n    max_item = max(counts.items(), key=lambda x: x[1])\n    \n    return max_item\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    # Extract all vowels from the input string\n    vowels = [char for char in s if char.lower() in 'aeiou']\n    \n    # Convert the string into a list for mutable operations\n    s_list = list(s)\n    \n    # Iterate over the string and replace vowels with reversed ones\n    for i, char in enumerate(s_list):\n        if char.lower() in 'aeiou':\n            s_list[i] = vowels.pop()\n    \n    # Join the list back into a string and return it\n    return ''.join(s_list)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    # Join the elements of the tuple into a single string\n    res = ''.join(tup)\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    # Use a lambda function to filter out negative numbers and then sum them up\n    return sum(filter(lambda x: x < 0, nums))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\nfrom math import pow\n\ndef check_last(arr,n,p):\n    # Calculate the product of all elements in the array\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    \n    # If p is 0, return \"EVEN\" if the product is even, otherwise \"ODD\"\n    if (p == 0):\n        if (prod % 2 == 0):\n            return \"EVEN\"\n        else:\n            return \"ODD\"\n    \n    # If p is odd, return \"EVEN\" if the number of odd elements is even, otherwise \"ODD\"\n    elif (p & 1):\n        count = 0\n        for i in range(n):\n            if (arr[i] & 1):\n                count += 1\n        \n        if (count & 1):\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n    \n    # If p is even, return \"EVEN\" if the product of all elements is even, otherwise \"ODD\"\n    else:\n        if (prod & 1):\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    # Calculate the nth hexagonal number using the formula: n * (2n - 1)\n    return n * (2 * n - 1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(units):\n    # Calculate the base cost for the first 100 units\n    if units <= 100:\n        return units * 0.8\n    \n    # Calculate the cost for the next 200 units (101-300)\n    elif units <= 300:\n        return 100 * 0.8 + (units - 100) * 1.5\n    \n    # Calculate the cost for units above 300\n    else:\n        return 100 * 0.8 + 200 * 1.5 + (units - 300) * 2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    # Count the number of zeros in the array\n    count = arr.count(0)\n    # Calculate the ratio of zeros by dividing the count by the length of the array\n    return count / len(arr)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Loop until n becomes zero\n    while (n != 0):\n        # If last bit is 1, then it's an odd number\n        if (n & 1):\n            # Check if it's an odd power of two\n            if ((n & 2) == 0):\n                return True\n            else:\n                return False\n        n = n >> 1\n\n    return False\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    # Calculate the circumference using the formula 2 * pi * radius\n    return round(2 * math.pi * radius, 4)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\nfrom collections import Counter\n\ndef extract_singly(test_list):\n    # Flatten the list of tuples and count occurrences of each element\n    res = Counter([ele for sub in test_list for ele in sub])\n    # Filter elements that occur only once\n    res = [key for key, val in res.items() if val == 1]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef flip(arr, i):\n    # Reverse the sub-list from 0 to i\n    start = 0\n    while start < i:\n        arr[start], arr[i] = arr[i], arr[start]\n        start += 1\n        i -= 1\n\n\ndef pancake_sort(arr):\n    n = len(arr)\n    \n    for curr_size in range(n, 1, -1):\n        # Find index of the maximum element in arr[0..curr_size-1]\n        mi = arr.index(max(arr[0:curr_size]))\n        \n        # Move the maximum number to end by first moving it to beginning and then moving it to end\n        if mi != curr_size - 1:\n            # Move the maximum number to beginning\n            flip(arr, mi)\n            \n            # Move the maximum number to end\n            flip(arr, curr_size - 1)\n\n    return arr\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\nfrom collections import Counter\n\ndef count_samepair(nums1, nums2, nums3):\n    # Count occurrences of each element in the first list\n    counter1 = Counter(nums1)\n    \n    # Count occurrences of each element in the second list\n    counter2 = Counter(nums2)\n    \n    # Count occurrences of each element in the third list\n    counter3 = Counter(nums3)\n    \n    # Find common elements between the counters and sum their minimum counts\n    return sum(min(counter1[key], counter2[key], counter3[key]) for key in counter1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nfrom collections import Counter\n\ndef find_lists(test_tup):\n    res = sum(isinstance(ele, list) for ele in test_tup)\n    return (res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr,n):\n    arr.sort()\n    res = 0\n    for i in range(n):\n        res += (arr[i] * (2*i - n + 1))\n    return abs(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr,n):\n    # Initialize minimum and maximum element as first element of array\n    min = arr[0]\n    max = arr[0]\n    \n    # Traverse through array starting from second element\n    for i in range(1,n):\n        # Update minimum if current element is smaller than existing minimum\n        if (arr[i] < min):\n            min = arr[i]\n        \n        # Update maximum if current element is greater than existing maximum\n        elif (arr[i] > max):\n            max = arr[i]\n    \n    # Return the absolute difference between maximum and minimum element\n    return (max - min)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(s):\n    # Calculate the ASCII value of each character and sum them up\n    return sum(ord(c) for c in s)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom sys import maxsize\n\n\ndef max_path_sum(triangle, m, n):\n    # Create a table to store intermediate results\n    T = [[0 for x in range(n + 1)] for x in range(m + 1)]\n    \n    # Initialize the last row of the table with the last row of the triangle\n    for i in range(n + 1):\n        T[m][i] = triangle[m][i]\n    \n    # Fill the table from bottom up\n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1):\n            # Calculate the maximum path sum for each element\n            T[i][j] = max(T[i + 1][j], T[i + 1][j + 1]) + triangle[i][j]\n    \n    # The top element contains the maximum total path sum\n    return T[0][0]\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\nfrom collections import defaultdict\n\ndef sum_digits_twoparts(n):\n    # Create a dictionary to store the sum of digits for each digit position\n    dp = defaultdict(lambda: [-1] * 2)\n    \n    def solve(i, tight, prev):\n        # Base case: if we have processed all digits\n        if i == -1:\n            return prev\n        \n        # If the result is already computed\n        if dp[i][tight] != -1:\n            return dp[i][tight]\n        \n        ans = 0\n        ub = 9 if tight else n % 10\n        \n        # Iterate over possible digits\n        for j in range(ub + 1):\n            ans = max(ans, solve(i - 1, tight and (j == ub), prev + j))\n        \n        # Store the result in the dictionary\n        dp[i][tight] = ans\n        return ans\n    \n    # Calculate the maximum sum of digits by dividing the number into two parts\n    return solve(len(str(n)) - 1, True, 0)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\nfrom collections import defaultdict\n\ndef longest_subseq_with_diff_one(arr, n):\n    # Create a dictionary to store the length of the longest subsequence ending with each element\n    dp = defaultdict(lambda: 1)\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, n):\n        # Check if there exists an element before arr[i] such that their difference is 1\n        for j in range(i):\n            if abs(arr[j] - arr[i]) == 1:\n                # Update the length of the longest subsequence ending with arr[i]\n                dp[arr[i]] = max(dp[arr[i]], dp[arr[j]] + 1)\n    \n    # Return the maximum value from the dp dictionary, which represents the length of the longest subsequence\n    return max(dp.values())\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(A, B, C):\n    # Check if A is less than or equal to B and if (B - A + 1) is divisible by C\n    return A <= B and ((B - A + 1) % C == 0)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\nfrom math import gcd\n\ndef is_coprime(x, y):\n    # Two numbers are coprime if their greatest common divisor (GCD) is 1\n    return gcd(x, y) == 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\nfrom typing import List\n\ndef merge_sort(arr: List[int]) -> List[int]:\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left_half = merge_sort(arr[:mid])\n    right_half = merge_sort(arr[mid:])\n    \n    return merge(left_half, right_half)\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    # Append remaining elements from left or right list\n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nimport math\n\ndef parabola_vertex(a,b,c):\n    # Calculate the x-coordinate of the vertex\n    x = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the vertex using the quadratic formula\n    y = c - ((b ** 2) / (4 * a))\n    \n    return (x, y)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\nfrom operator import itemgetter\n\ndef specified_element(test_list, K):\n    # Extract the K-th element from each sublist using itemgetter\n    res = [itemgetter(K)(sublist) for sublist in test_list]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(n):\n    # Initialize result and count\n    res = 0\n    cnt = 0\n    \n    # Iterate through the bits of the number\n    while n > 0:\n        # Check if the current bit position is even (excluding the 0th bit)\n        if cnt % 2 != 0:\n            # Set the corresponding bit in the result\n            res |= (1 << cnt)\n        \n        # Shift the number right by one bit\n        n >>= 1\n        # Increment the bit counter\n        cnt += 1\n    \n    # XOR the original number with the result to toggle the even bits\n    return n ^ res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(test_tup):\n    # Convert each string element in the tuple to an integer\n    res = tuple((int(x[0]), int(x[1])) for x in test_tup)\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\nfrom itertools import groupby\n\ndef encode_list(nums):\n    # Use groupby to group consecutive identical elements and create pairs of count and element\n    return [[len(list(group)), key] for key, group in groupby(nums)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\nfrom collections import defaultdict\n\ndef min_Ops(arr,n,k):\n    # Create a dictionary to store the frequency of each element\n    freq = defaultdict(int)\n    \n    # Calculate the frequency of each element in the array\n    for i in range(n):\n        freq[arr[i]] += 1\n    \n    # Sort the keys of the frequency dictionary\n    keys = sorted(freq.keys())\n    \n    # Initialize variables to keep track of the minimum operations and current sum\n    min_ops = float('inf')\n    curr_sum = 0\n    \n    # Iterate through the sorted keys to calculate the minimum operations\n    for i in range(len(keys)):\n        curr_sum += (keys[i] * freq[keys[i]])\n        if i > 0:\n            curr_sum -= (keys[i-1] * freq[keys[i-1]])\n        \n        # Calculate the total number of operations needed to make all elements equal\n        ops = curr_sum + ((k - len(keys)) * keys[i])\n        \n        # Update the minimum operations if the current operations are smaller\n        min_ops = min(min_ops, ops)\n    \n    return min_ops\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\nfrom calendar import month_name\n\ndef month_season(month,day):\n    # Get the month number from the month name\n    month_num = list(month_name).index(month)\n    \n    # Determine the season based on the month number and day\n    if (month_num == 12 or month_num <= 2) and day < 20:\n        return 'winter'\n    elif (month_num >= 3 and month_num <= 5) and day < 21:\n        return 'spring'\n    elif (month_num >= 6 and month_num <= 8) and day < 22:\n        return 'summer'\n    else:\n        return 'autumn'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nfrom math import gcd\n\ndef solution(a, b, n):\n    # Check if the greatest common divisor of a and b divides n\n    if (n % gcd(a, b)) != 0:\n        return \"No Solution\"\n    \n    # Initialize variables for extended Euclidean algorithm\n    s, old_s = 0, 1\n    t, old_t = 1, 0\n    \n    # Apply the extended Euclidean algorithm\n    while b != 0:\n        quotient = a // b\n        a, b = b, a - quotient * b\n        old_s, s = s, old_s - quotient * s\n        old_t, t = t, old_t - quotient * t\n    \n    # Ensure the solution is positive\n    x = old_s % n\n    y = old_t % n\n    \n    return 'x = ', x, ', y = ', y\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    # Use list comprehension to filter out elements present in list2\n    result = [element for element in list1 if element not in list2]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    # Base case: if n is less than or equal to 0, return 0\n    if n <= 0:\n        return 0\n    else:\n        # Recursive case: add n to the sum of the series starting from n-2\n        return n + sum_series(n - 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nfrom math import tan, pi\n\ndef area_polygon(n, s):\n    # Calculate the area using the formula: (n * s^2) / (4 * tan(pi/n))\n    return float((n * s ** 2) / (4 * tan(pi / n)))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(n1,n2):\n    # Function to calculate sum of divisors\n    def sumOfDivisors(num):\n        total = 0\n        for i in range(1, num + 1):\n            if (num % i == 0):\n                total += i\n        return total\n\n    # Check if sums of divisors are equal\n    return sumOfDivisors(n1) == sumOfDivisors(n2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(str1):\n    # Initialize counter for matching positions\n    cnt = 0\n    \n    # Iterate over the string and compare with corresponding alphabet character\n    for i in range(len(str1)):\n        if str1[i] == chr(97 + i):  # Check lowercase\n            cnt += 1\n        elif str1[i] == chr(65 + i):  # Check uppercase\n            cnt += 1\n            \n    return cnt\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\nfrom collections import defaultdict\n\ndef find_even_Pair(arr,n):\n    # Dictionary to store frequency of XOR values\n    mp = defaultdict(int)\n    \n    # Initialize result counter\n    res = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Calculate XOR with all previous elements\n        for j in range(i):\n            x = arr[i] ^ arr[j]\n            \n            # Check if XOR is even\n            if (x & 1) == 0:\n                res += 1\n        \n        # Update frequency of current element's XOR value\n        mp[arr[i]] += 1\n    \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\nimport math\n\ndef next_Power_Of_2(n):\n    # If n is less than or equal to 0, return 1 as the smallest power of 2\n    if (n <= 0):\n        return 1\n    \n    # Calculate the position of the most significant bit using log base 2\n    p = int(math.log2(n))\n    \n    # Return the next power of 2 by raising 2 to the power of (p + 1)\n    return int(pow(2, p + 1))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\nfrom collections import Counter\n\n\ndef frequency(arr, x):\n    # Create a counter object from the array\n    count = Counter(arr)\n    \n    # Return the frequency of the element 'x'\n    return count[x]\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\nfrom math import sqrt\n\ndef get_pell(n):\n    # Calculate the nth Pell number using the formula\n    return int((sqrt(2) + 1) ** n + (sqrt(2) - 1) ** n)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(nums, start, end):\n    # Calculate the sum of elements from index 'start' to 'end' (inclusive)\n    return sum(nums[start:end + 1])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\nfrom math import tan, pi\n\ndef perimeter_pentagon(s):\n    # Calculate the perimeter by multiplying the side length by 5\n    return s * 5\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\nfrom collections import defaultdict\n\ndef count_occurance(string):\n    # Initialize a dictionary with default values set to 0\n    d = defaultdict(int)\n    \n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # Check if the current and next two characters form 'std'\n        if string[i:i+3] == \"std\":\n            # Increment the count for 'std' in the dictionary\n            d[\"std\"] += 1\n    \n    # Return the total count of 'std' occurrences\n    return d[\"std\"]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\nimport re\n\ndef remove_splchar(str1):\n    # Use regular expression to replace non-alphanumeric characters with an empty string\n    result = re.sub('[\\W_]+', '', str1)\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\nfrom collections import defaultdict\n\ndef group_keyvalue(test_list):\n    res = defaultdict(list)\n    \n    # Iterate through each key-value pair in the list\n    for key, val in test_list:\n        # Append the value to the corresponding key's list\n        res[key].append(val)\n    \n    return dict(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\nfrom collections import deque\n\ndef is_valid_parenthese(str1):\n    stack = deque()\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    \n    return not stack\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    # Calculate the perimeter by summing up all three sides\n    return (a + b + c)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(l,r):\n    # Check if double the lower limit is within the range\n    if 2 * l <= r:\n        return (l, 2 * l)\n    else:\n        # If not, check if triple the lower limit is within the range\n        if 3 * l <= r:\n            return (l, 3 * l)\n        else:\n            # If neither condition is met, no solution exists\n            return (-1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\nimport re\n\n\ndef string_literals(patterns, text):\n    # Iterate through each pattern\n    for pattern in patterns:\n        # Check if the pattern is found in the text using regular expression search\n        if re.search(pattern, text):\n            return 'Matched!'\n    # If no patterns are matched, return 'Not Matched!'\n    return 'Not Matched!'\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\nfrom typing import List\n\ndef is_num_keith(n: int) -> bool:\n    # Convert the number to a list of its digits\n    num_list = [int(digit) for digit in str(n)]\n    \n    # Initialize the sum variable with the first 'k' digits\n    sum_val = sum(num_list)\n    \n    # Iterate until the sum exceeds the original number\n    while sum_val < n:\n        # Remove the oldest digit from the sum and add the newest digit\n        sum_val -= num_list.pop(0)\n        num_list.append(sum_val % 10)\n        \n        # Update the sum with the new digit\n        sum_val += num_list[-1]\n    \n    # Check if the sum equals the original number\n    return sum_val == n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\n\ndef distance_lat_long(slat, slon, elat, elon):\n    # Convert latitude and longitude from degrees to radians\n    slat = math.radians(slat)\n    slon = math.radians(slon)\n    elat = math.radians(elat)\n    elon = math.radians(elon)\n\n    # Calculate the difference in latitude and longitude\n    dlat = elat - slat\n    dlon = elon - slon\n\n    # Apply the Haversine formula to calculate the distance\n    a = (math.sin(dlat / 2) ** 2 +\n         math.cos(slat) * math.cos(elat) *\n         math.sin(dlon / 2) ** 2)\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371  # Radius of Earth in kilometers\n    return c * r\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\nfrom typing import List\n\ndef common_prefix(arr: List[str], n: int) -> str:\n    # Sort the array\n    arr.sort()\n    \n    # Find the minimum length among the first and last string\n    min_length = min(len(arr[0]), len(arr[n - 1]))\n    \n    i = 0\n    \n    # Compare characters until a mismatch is found or end of the shortest string\n    while (i < min_length):\n        if (arr[0][i] != arr[n - 1][i]):\n            break\n        i += 1\n    \n    # Return the common prefix up to the point of mismatch\n    return arr[0].substring(0, i)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(string):\n    # Find all uppercase letters\n    upper = re.findall('[A-Z]', string)\n    \n    # Find all lowercase letters\n    lower = re.findall('[a-z]', string)\n    \n    # Find all special characters\n    special = re.findall('[@_!#$%^&*()<>?/\\|}{~:]', string)\n    \n    # Find all numeric values\n    number = re.findall('[0-9]', string)\n    \n    return upper, lower, special, number\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom collections import defaultdict\n\ndef count_pairs(arr, n, k):\n    # Create a dictionary to store elements and their indices\n    mp = defaultdict(list)\n    \n    # Populate the dictionary with elements and their indices\n    for i in range(n):\n        mp[arr[i]].append(i)\n    \n    # Initialize a counter for valid pairs\n    cnt = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Check if there exists an element that is k more than the current element\n        if (arr[i] + k) in mp:\n            # If such an element exists, increment the counter by the number of occurrences\n            cnt += len(mp[arr[i] + k])\n    \n    # Return half of the count since each pair is counted twice\n    return cnt // 2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(nums,n):\n    # Check if any number in the list is greater than n\n    return any(x > n for x in nums)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nfrom math import sqrt\n\ndef parabola_focus(a,b,c):\n    # Calculate the x-coordinate of the focus\n    x = -b / (2 * a)\n    \n    # Calculate the y-coordinate of the focus using the formula\n    y = ((4 * a * c) - (b ** 2) + 1) / (4 * a)\n    \n    return (x, y)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(text, patterns):\n    # Iterate through each pattern\n    for pattern in patterns:\n        # Check if the pattern is found in the text\n        if re.search(pattern, text):\n            return 'Matched!'\n        else:\n            return 'Not Matched!'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\nfrom collections import defaultdict\n\n\ndef longest_common_subsequence(X, Y, m, n):\n    # Create a dictionary to store the lengths of LCSs\n    lcs = defaultdict(int)\n\n    # Iterate over each character in X and Y\n    for i in range(m + 1):\n        for j in range(n + 1):\n\n            # If either string is empty, set the length of LCS to 0\n            if i == 0 or j == 0:\n                lcs[i, j] = 0\n\n            # If characters match, increment the length of LCS by 1\n            elif X[i - 1] == Y[j - 1]:\n                lcs[i, j] = lcs[i - 1, j - 1] + 1\n\n            # If characters don't match, take the maximum length from previous computations\n            else:\n                lcs[i, j] = max(lcs[i - 1, j], lcs[i, j - 1])\n\n    # Return the length of the longest common subsequence\n    return lcs[m, n]\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\nimport math\n\ndef prod_Square(n):\n    # Iterate through potential square roots\n    for i in range(int(math.sqrt(n)) + 1):\n        # Check if i is a perfect square\n        if (i * i != n):\n            continue\n        # Iterate through potential second square roots\n        for j in range(i, int(math.sqrt(n)) + 1):\n            # Check if j is a perfect square and product equals n\n            if ((j * j != n) and (i * i * j * j == n)):\n                return True\n    return False\n\n# Test case"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    # Iterate through each element in the array\n    for i in range(n):\n        # If the current element is not within the valid range [1, n]\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = n + 1\n    \n    # Use the index as a hash key and number sign as a presence detector\n    for i in range(n):\n        num = abs(arr[i])\n        if num <= n:\n            arr[num - 1] = -abs(arr[num - 1])\n    \n    # The first positive index+1 indicates the missing number\n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n    \n    # If all numbers from 1 to n are present, then the missing number is n+1\n    return n + 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1, y1, x2, y2):\n    # Calculate the number of integral points inside the square\n    return (x2 - x1 - 1) * (y2 - y1 - 1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\nfrom calendar import monthrange\n\ndef check_monthnumber(monthName):\n    # Check if the number of days in the month is exactly 30\n    return monthrange(2021, monthName)[1] == 30\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\nimport re\n\ndef check_String(string):\n    # Check if the string contains at least one letter and one digit using regular expressions\n    return bool(re.search(\"[a-zA-Z]\", string) and re.search(\"[0-9]\", string))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(test_tup):\n    # Convert the tuple to a set to remove duplicates\n    res = tuple(set(test_tup))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(n):\n    dec_value = 0\n    base = 1\n\n    while n > 0:\n        last_digit = n % 10\n        n = int(n / 10)\n        dec_value += last_digit * base\n        base = base * 8\n\n    return dec_value\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr,n,x):\n    low = 0\n    high = n - 1\n    while (low <= high):\n        mid = (low + high) // 2\n        if ((mid == 0 or x > arr[mid - 1]) and (arr[mid] == x)):\n            return mid\n        elif (x > arr[mid]):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\n# Test case"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\nfrom typing import List, Tuple\n\ndef remove_tuples(test_list: List[Tuple], K: int) -> List[Tuple]:\n    # Filter out tuples of length K\n    res = [tup for tup in test_list if len(tup) != K]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nfrom operator import pow\n\ndef find_exponentio(test_tup1, test_tup2):\n    # Use map with pow function to calculate powers\n    res = tuple(map(pow, test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nfrom math import pi\n\ndef largest_triangle(a, b):\n    # Calculate the area of the largest triangle inscribed in the ellipse\n    return (3 * (a ** 2 + b ** 2) - (a ** 2 * b ** 2)) / (4 * pi)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\nimport math\n\ndef highest_Power_of_2(n):\n    # Calculate the highest power of 2 using logarithm base 2\n    return int(math.pow(2, int(math.log2(n))))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(list_nums):\n    # Find the maximum value in the list\n    max_value = max(list_nums)\n    # Use list comprehension to find all indices where this max value occurs\n    result = [index for index, value in enumerate(list_nums) if value == max_value]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(input_list):\n    # Check if all elements in the list are the same\n    return input_list.count(input_list[0]) == len(input_list)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    # Use list comprehension to filter out even-indexed characters\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(n1,n2):\n    # XOR the numbers to get the bits that differ\n    xor = n1 ^ n2\n    \n    # Initialize count of differing bits\n    setBits = 0\n    \n    # Count the number of set bits (differing bits)\n    while (xor > 0):\n        setBits += xor & 1\n        xor >>= 1\n    \n    return setBits\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(str1, char):\n    return str1.count(char)\n    \n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\nfrom typing import Tuple\n\ndef inversion_elements(test_tup):\n    res = tuple(-i for i in test_tup)\n    return (res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\nfrom typing import Tuple\n\ndef concatenate_elements(test_tup):\n    # Initialize an empty list to store the concatenated results\n    res = []\n    \n    # Iterate through the tuple using index and value\n    for i, ele in enumerate(test_tup):\n        # Check if it's not the last element\n        if i != len(test_tup) - 1:\n            # Concatenate the current element with the next one and append to the result list\n            res.append(ele + test_tup[i + 1])\n    \n    # Convert the list to a tuple and return\n    return tuple(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\nfrom collections import defaultdict\n\ndef find_longest_repeating_subseq(string):\n    m = len(string)\n    \n    # Create a dictionary to store the last occurrence of each character\n    last_occurrence = defaultdict(lambda: -1)\n    \n    # Initialize DP table with zeros\n    dp = [[0] * (m + 1) for _ in range(m + 1)]\n    \n    # Fill the DP table\n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            if string[i - 1] == string[j - 1] and i != j:\n                # Characters match and are not at the same position\n                dp[i][j] = 1 + dp[last_occurrence[string[i - 1]]][i - 1]\n            else:\n                # Characters do not match or are at the same position\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n            \n            # Update the last occurrence of the current character\n            last_occurrence[string[i - 1]] = i\n    \n    # The value in dp[m][m] is the length of the longest repeating subsequence\n    return dp[m][m]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(decimal):\n    # Regular expression pattern for matching a decimal number with up to two decimal places\n    return bool(re.match(r\"^[0-9]+(\\.[0-9]{1,2})?$\", decimal))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\nimport heapq as hq\n\ndef heap_replace(heap,item):\n    # Replace the smallest element with the new item\n    return hq.heapreplace(heap,item)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string):\n    # Define the pattern to match allowed characters (a-z, A-Z, 0-9)\n    pattern = re.compile(r'[^a-zA-Z0-9.]')\n    # Search for any character not in the allowed set\n    if pattern.search(string):\n        return False\n    else:\n        return True\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    # Initialize the count of numbers with both first and last bits set\n    count = 0\n    \n    # Iterate through all numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if the first bit (bit at position 0) is set\n        if i & 1:\n            # Check if the last bit (bit at position log2(i)) is also set\n            if i & (1 << (int)(log2(i))):\n                count += 1\n    \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    # Initialize the sum variable\n    s = 0\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n + 1):\n        # Add the fourth power of the current number to the sum\n        s += pow(i, 4)\n    \n    # Return the final sum\n    return s\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\nfrom typing import Tuple\n\ndef concatenate_strings(test_tup1: Tuple[str], test_tup2: Tuple[str]) -> Tuple[str]:\n    # Perform element-wise concatenation using zip and tuple comprehension\n    res = tuple(x + y for x, y in zip(test_tup1, test_tup2))\n    return (res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\nimport math\n\ndef degree_radian(radian):\n    # Convert radian to degree using the formula: (radian * 180) / pi\n    return (radian * 180) / math.pi\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\nfrom itertools import chain\n\ndef decode_list(encoded_list):\n    # Use chain.from_iterable to flatten the list and repeat elements based on their count\n    decoded_list = list(chain.from_iterable([x] * y for x, y in encoded_list if isinstance(x, list) else (x, 1)))\n    return decoded_list\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\nfrom collections import Counter\n\ndef check_subset_list(list1, list2):\n    # Count the occurrences of each element in list1\n    count = Counter(list1)\n    \n    # Iterate through each sublist in list2\n    for sub in list2:\n        # Subtract the counts of elements found in the sublist from the overall count\n        count.subtract(sub)\n        # If any count goes negative, it means an element in list2 is not in list1\n        if min(count.values()) < 0:\n            return False\n    \n    # If all counts are non-negative, list2 is a subset of list1\n    return True\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\nfrom collections import defaultdict\n\ndef first_Repeated_Char(str1):\n    # Create a dictionary to store character counts\n    char_count = defaultdict(int)\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # Increment the count of the current character\n        char_count[char] += 1\n        \n        # Check if the count of the current character is greater than 1\n        if char_count[char] > 1:\n            return char\n    \n    # If no character repeats, return None\n    return None\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(x, y):\n    # Ensure x is less than or equal to y\n    if (x > y):\n        return min_Operations(y, x)\n \n    # If x becomes 0, then no more operations are needed\n    if (x == 0):\n        return y\n \n    # If last digits of x and y don't match, remove last digit of y\n    if (x % 10 != y % 10):\n        return 1 + min_Operations(x, y // 10)\n \n    # Remove last digit of both x and y\n    return min_Operations(x // 10, y // 10)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\nfrom heapq import nlargest, nsmallest\n\ndef extract_min_max(test_tup, K):\n    # Extract smallest K elements\n    res = nsmallest(K, test_tup)\n    # Extract largest K elements from the remaining elements\n    res += nlargest(K, test_tup[len(res):])\n    return tuple(sorted(res))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\nimport re\n\ndef replace_max_specialchar(text,n):\n    # Replace up to 'n' occurrences of spaces, commas, or dots with a colon\n    return re.sub(\"[ ,.]\", \":\", text, n)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(nums):\n    # Use the next() function with a generator expression to find the first even number\n    return next((num for num in nums if num % 2 == 0), -1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\nfrom typing import Tuple\n\ndef check_type(test_tup):\n    # Check if all elements in the tuple are of the same type\n    res = all(isinstance(ele, type(test_tup[0])) for ele in test_tup)\n    return (res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nfrom bisect import bisect_left\n\n\ndef is_majority(arr, n, x):\n    # Find the leftmost index of `x` using binary search\n    i = bisect_left(arr, x)\n    \n    # Check if `i` is within bounds and arr[i] is equal to `x`\n    if i != n and arr[i] == x:\n        # Calculate the number of occurrences of `x` from index `i`\n        count = (n - i)\n        \n        # Check if the number of occurrences is greater than half the size of the array\n        return (count > n // 2)\n    \n    # If `x` is not found or does not meet the majority condition, return False\n    return False\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    # Initialize count to zero\n    count = 0\n    \n    # Loop until n becomes zero\n    while (n != 0):\n        # Add the least significant bit to count\n        count += n & 1\n        # Right shift n by 1 bit\n        n >>= 1\n    \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, low, high):\n    # Initialize the result as the first element of the array\n    result = arr[low]\n    \n    # Iterate through the array from the second element to the last\n    for i in range(low + 1, high + 1):\n        # Update the result if a smaller element is found\n        if (arr[i] < result):\n            result = arr[i]\n    \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        # Check if the index is even\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x,y,z):\n    # Use the min() function to find the minimum of three numbers\n    return min(min(x,y),z)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with bits set from position l to r\n    mask = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    \n    # Apply the mask to n and check if the result is zero\n    return (n & mask) == 0\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef swap(arr, i, j):\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n\ndef re_arrange_array(arr, n):\n    # Initialize two pointers\n    left = 0\n    right = n - 1\n    \n    while True:\n        # Move the left pointer until a positive number is found\n        while (left < right) and (arr[left] < 0):\n            left += 1\n        \n        # Move the right pointer until a negative number is found\n        while (left < right) and (arr[right] >= 0):\n            right -= 1\n        \n        # Swap the elements at the left and right pointers\n        if (left < right):\n            swap(arr, left, right)\n    \n    return arr\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\nimport re\n\n\ndef replace_blank(text, char):\n    # Use regular expression to replace all blank spaces with the specified character\n    return re.sub(r'\\s', char, text)\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nfrom math import floor\n\ndef max_sum(arr, n):\n    # Initialize the result with the first element of the array\n    res = arr[0][0]\n    \n    # Iterate through each row starting from the second row\n    for i in range(1, n):\n        # Update the last element of the current row by adding the value of the previous row's last element\n        arr[i][n - 1] += arr[i - 1][n - 1]\n        \n        # Iterate through each element in the current row except the last one\n        for j in range(n - 2, -1, -1):\n            # Calculate the maximum sum by considering two possible paths: left or right\n            arr[i][j] += max(arr[i - 1][floor(j / 2)], arr[i - 1][floor((j + 1) / 2)])\n    \n    # Find the maximum sum among all elements in the last row\n    for i in range(n):\n        res = max(res, arr[n - 1][i])\n    \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nfrom heapq import nlargest\n\ndef larg_nnum(nums,n):\n    # Use nlargest from heapq to find the n largest numbers\n    return nlargest(n, nums)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\nimport math\n\ndef lateralsuface_cylinder(r, h):\n    # Calculate the lateral surface area using the formula 2 * pi * r * h\n    return (2 * math.pi * r * h)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    # Calculate the volume of the cube using the formula side^3\n    return (side ** 3)\n\n\n# Test the function with an example"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    # Initialize mask with the least significant bit set\n    mask = 1\n    \n    # Iterate through each bit position\n    while n >= mask:\n        # Check if the current bit is odd (i.e., not zero)\n        if n & mask:\n            # Set the corresponding even bit by OR-ing with the mask shifted left by one\n            n |= mask << 1\n        \n        # Move to the next bit position\n        mask <<= 2\n    \n    return n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(N,K):\n    # Calculate the total number of small equilateral triangles\n    Total = (N * (N + 1)) // 2\n    \n    # Calculate the number of large equilateral triangles\n    Large = ((N - K + 1) * (N - K + 2)) // 2\n    \n    # Subtract the number of large triangles from the total\n    return Total - Large\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\nfrom collections import defaultdict\n\ndef check_occurences(test_list):\n    res = defaultdict(int)\n    \n    # Count occurrences of each record\n    for sub in test_list:\n        res[sub[0], sub[1]] += 1\n    \n    return dict(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(str1):\n    # Calculate the length of the string\n    str_len = len(str1)\n    \n    # Use the formula for the number of non-empty substrings: n * (n + 1) / 2\n    return int(str_len * (str_len + 1) / 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\nfrom functools import lru_cache\n\n@lru_cache(None)\ndef get_total_number_of_sequences(m, n):\n    # Base case: If there's only one element in the sequence\n    if n == 1:\n        return m\n    \n    total_sequences = 0\n    \n    # Iterate through all possible values for the first element\n    for i in range(1, m + 1):\n        # Check if the value can be part of a valid sequence\n        if i * 2 <= m and i * 2 >= i:\n            # Recursively count sequences starting with this value\n            total_sequences += get_total_number_of_sequences(m, n - 1)\n    \n    return total_sequences\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\nfrom itertools import chain\n\ndef replace_list(nums1, nums2):\n    # Replace the last element of nums1 with all elements from nums2\n    return list(chain(nums1[:-1], nums2))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(x, y, z):\n    # Create a 3D list with dimensions x, y, and z\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    # Initialize a counter to zero\n    i = 0\n    # Iterate over each character in the string\n    for char in str:\n        # Increment the counter for each character\n        i += 1\n    # Return the total count of characters\n    return i\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\nfrom collections import defaultdict\n\ndef sort_on_occurence(test_list):\n    res = defaultdict(list)\n    \n    # Collect elements by their first occurrence\n    for key, val in test_list:\n        res[key].append(val)\n    \n    # Sort and create the result list\n    res = sorted(res.items())\n    res = [[key] + vals + [len(vals)] for key, vals in res]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\nimport math\n\ndef next_Perfect_Square(n):\n    # Calculate the square root of the given number and round it up to the nearest integer\n    sqrt_n = math.ceil(math.sqrt(n))\n    \n    # Return the square of the rounded-up value, which is the next perfect square\n    return sqrt_n ** 2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\nfrom math import inf\n\n\ndef max_sum(arr, n):\n    # To store max sum of increasing subsequence\n    # with every index i\n    inc = [0] * n\n\n    # To store max sum of decreasing subsequence\n    # with every index i\n    dec = [0] * n\n\n    # Initialize inc[] and dec[]\n    for i in range(n):\n        inc[i] = arr[i]\n        dec[i] = arr[i]\n\n    # Compute max sum of increasing subsequence\n    # with every index i\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                if inc[i] < inc[j] + arr[i]:\n                    inc[i] = inc[j] + arr[i]\n\n    # Compute max sum of decreasing subsequence\n    # with every index i\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                if dec[i] < dec[j] + arr[i]:\n                    dec[i] = dec[j] + arr[i]\n\n    # Find the maximum sum of bitonic subsequence\n    # by adding max sums of increasing and decreasing\n    # subsequences and subtracting the common elements\n    result = -inf\n    for i in range(n):\n        if result < (inc[i] + dec[i]):\n            result = inc[i] + dec[i]\n\n    return result\n\n\n# Test case"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    # Initialize guess to n/2\n    x = n / 2.0\n    \n    # Iterate until the guess is accurate enough\n    while True:\n        root = (x + (n / x)) / 2\n        \n        # Check if the difference between the current and previous guess is small enough\n        if abs(root - x) < 1e-15:\n            return root\n        \n        # Update the guess for the next iteration\n        x = root\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    \n    # Create a 2D array to store lengths of longest palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the table. Note that the lower diagonal values of table are useless and not filled in the process.\n    for cl in range(2, n + 1):  # cl is the length of substring\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    # Length of the longest palindromic subseq will be in dp[0][n-1]\n    return dp[0][n - 1]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\nfrom math import gamma\n\n\ndef harmonic_sum(n):\n    # Calculate the harmonic sum using the gamma function\n    return gamma(n + 1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(nums1, nums2):\n    result = list(filter(lambda x: x in nums1, nums2))\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(test_tup, K):\n    # Initialize counter to zero\n    res = 0\n    \n    # Iterate through each element in the tuple\n    for ele in test_tup:\n        # Check if the current element matches the target value\n        if ele == K:\n            # Increment the counter if there is a match\n            res += 1\n            \n    # Return the total count of occurrences\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, element):\n    # Use list comprehension to insert the specified element before each item in the original list\n    return [value for item in lst for value in (element, item)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport cmath\n\ndef convert(z):\n    # Convert the complex number to polar coordinates\n    return cmath.polar(complex(z))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\nfrom collections import Counter\n\n\ndef count_integer(lst):\n    # Count elements in the list using Counter and filter for integer types\n    return sum(1 for i in lst if isinstance(i, int))\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\nimport re\n\ndef words_ae(text):\n    # Find all words starting with 'a' or 'e'\n    return re.findall(r'\\b[ae]\\w*', text)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nfrom itertools import product\n\ndef combinations_colors(colors, n):\n    # Generate all combinations with repetitions using product\n    return list(product(colors, repeat=n))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(num):\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += 1\n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x, y):\n    # Swapping the values of x and y\n    x, y = y, x\n    return (x, y)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(nums):\n    # Use the filter function with a lambda to select odd numbers and then use len() to count them\n    return len(list(filter(lambda x: (x % 2 != 0), nums)))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\nfrom operator import itemgetter\n\ndef maximize_elements(test_tup1, test_tup2):\n    # Combine both tuples and sort by the second element of each tuple in descending order\n    res = sorted(list(zip(*test_tup1 + test_tup2)), key=itemgetter(1), reverse=True)\n    \n    # Split the combined list back into two tuples\n    res = zip(res[:len(test_tup1)], res[len(test_tup1):])\n    \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nfrom sympy import isprime\n\ndef newman_prime(n):\n    # Initialize variables\n    i = 2\n    count = 0\n    \n    while True:\n        # Calculate Newman-Shanks-Williams sequence value\n        ns_w_value = (1 << i) - 1\n        \n        # Check if the value is prime\n        if isprime(ns_w_value):\n            count += 1\n            \n            # If we have found the nth prime, return it\n            if count == n:\n                return ns_w_value\n        \n        i += 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\nfrom operator import truediv\n\ndef division_elements(test_tup1, test_tup2):\n    # Perform element-wise division using map and truediv\n    res = tuple(map(truediv, test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\nfrom itertools import islice\n\ndef split_two_parts(lst, n):\n    # Split the list into two parts using islice\n    return (list(islice(lst, n)), list(islice(lst, n, None)))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\nfrom collections import ChainMap\n\n# Function to merge two dictionaries\ndef merge_dict(dict1, dict2):\n    # Merge the two dictionaries using ChainMap and convert to a dictionary\n    merged_dict = dict(ChainMap(dict2, dict1))\n    return merged_dict\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_years):\n    # Check if the input is negative\n    if human_years < 0:\n        exit()\n    # Calculate the first two years of a dog's life\n    elif human_years <= 2:\n        dog_years = human_years * 10.5\n    # Calculate the additional years after the first two\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n    return dog_years\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\nfrom itertools import islice\n\ndef list_split(lst, n):\n    # Split the list into sublists of length n\n    return [list(islice(lst, i, i + n)) for i in range(0, len(lst), n)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    # Calculate the lateral surface area of a cube\n    return 4 * (side ** 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    # Calculate the sum of squares of first n odd natural numbers using the formula\n    return int(n * (4 * n * n - 1) / 3)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\nfrom math import sqrt\n\ndef is_square(n):\n    # Check if the square root of n is an integer\n    return int(sqrt(n)) ** 2 == n\n\n\ndef find_star_num(n):\n    # Calculate the n'th star number using the formula\n    return (6 * n * n - 1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    # Get the ASCII value of the character using ord() and return it\n    return ord(char)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr,n):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Iterate through the array with index and element\n    for i in range(n):\n        # Check if the position is even and the number is even\n        if (i % 2 == 0 and arr[i] % 2 == 0):\n            # Add the number to the sum\n            sum += arr[i]\n    \n    # Return the final sum\n    return sum\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    # Initialize sum to store the result\n    Sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(1, n + 1):\n        # Calculate the fifth power of the current even number and add it to the sum\n        Sum += (2 * i) ** 5\n    \n    return Sum\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\nfrom operator import itemgetter\n\ndef rear_extract(test_list):\n    # Extracting last elements using itemgetter\n    res = [itemgetter(2)(sub) for sub in test_list]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\nfrom operator import sub\n\ndef substract_elements(test_tup1, test_tup2):\n    # Using map() and sub() to subtract elements\n    res = tuple(map(sub, test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nfrom math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    # Calculate the sum of binomial coefficients at even indices\n    return (1 << n) // 2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, n, k):\n    # Initialize variables for binary search\n    low = 0\n    high = n - 1\n    \n    while (low <= high):\n        mid = (low + high) // 2\n        \n        # Check if the middle element is the target\n        if (arr[mid] == k):\n            return mid\n        \n        # If the target is in the left half and not at the current position\n        elif ((mid != 0 and arr[mid - 1] < k) or mid == 0):\n            return mid\n        \n        # If the target is greater than the middle element\n        elif (k > arr[mid]):\n            low = mid + 1\n        \n        # If the target is less than the middle element\n        else:\n            high = mid - 1\n    \n    # Return the position where the last element was removed\n    return mid\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\nimport math\n\ndef volume_cylinder(radius, height):\n    # Calculate the base area using the formula for the area of a circle\n    base_area = math.pi * (radius ** 2)\n    \n    # Calculate the volume by multiplying the base area by the height\n    volume = base_area * height\n    \n    return volume\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\nfrom operator import ge, le\n\n\ndef dict_filter(dict_input, threshold):\n    # Filter the dictionary using a lambda function\n    result = dict(filter(lambda item: le(item[1], threshold), dict_input.items()))\n    return result\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nfrom collections import Counter\n\ndef count_first_elements(test_tup):\n    # Initialize counter with default value of 0 for all elements\n    res = Counter({ele: 0 for ele in test_tup})\n    \n    # Iterate over each element in the tuple\n    for ele in test_tup:\n        # If the element is not a tuple, increment its count\n        if not isinstance(ele, tuple):\n            res[ele] += 1\n    \n    # Return the count of the first element before the record\n    return res[test_tup[0]]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    # Calculate the nth decagonal number using the formula\n    return int(4 * n * n - 3 * n)\n    \n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, x):\n    # Iterate through each element in the array\n    for i in range(len(array)):\n        # Check if the current element matches the target value\n        if array[i] == x:\n            return True, i  # Return True and the index of the found element\n    \n    return False, -1  # Return False and -1 if the element is not found\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\nfrom collections import Counter\n\ndef all_unique(data):\n    # Count occurrences of each element in the list\n    counts = Counter(data)\n    \n    # Check if any element occurs more than once\n    for count in counts.values():\n        if count > 1:\n            return False\n    \n    return True\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    # Use map with a lambda function to subtract corresponding elements\n    result = map(lambda x, y: x - y, list1, list2)\n    return list(result)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\nfrom collections import Counter\n\ndef validate(n):\n    # Count the frequency of each digit in the number\n    freq = Counter(str(n))\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for d, count in freq.items():\n        if int(d) < count:\n            return False\n    \n    return True\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\nfrom typing import List\n\ndef check_element(lst: List[str], x: str) -> bool:\n    # Check if all elements in the list are equal to the given string\n    return all(item == x for item in lst)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\nimport re\n\n# Define the regular expression pattern\npattern = r\"ab{2,3}\"\n\ndef text_match_two_three(text):\n    # Search for the pattern in the text\n    if re.search(pattern,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\nfrom sys import maxsize\n\ndef max_sub_array_sum_repeated(arr, n, k):\n    # Calculate the maximum subarray sum for one repetition\n    max_so_far = arr[0]\n    curr_max = arr[0]\n    \n    for i in range(1, n * k):\n        curr_max = max(arr[i % n] + curr_max, arr[i % n])\n        max_so_far = max(max_so_far, curr_max)\n        \n    return max_so_far\n\n# Test case"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    # Calculate the sum of squares of first n even natural numbers\n    return int((4 * n * (n + 1) * (2 * n + 1)) / 3)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nfrom math import gcd\n\ndef modular_inverse(arr, n, p):\n    # Initialize the count of such elements\n    count = 0\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Check if the element's modular inverse is equal to itself\n        if (arr[i] * arr[i]) % p == 1:\n            count += 1\n    \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\nfrom datetime import date\n\n\ndef odd_Days(year):\n    # Calculate the difference between the current date and the given year's date\n    diff = date(year + 1, 1, 1) - date(year, 1, 1)\n    \n    # Return the number of odd days (remainder when divided by 7)\n    return diff.days % 7\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom operator import itemgetter\n\ndef max_length(list_of_lists):\n    # Find the maximum length using itemgetter\n    max_len = max(list_of_lists, key=itemgetter(0))\n    # Return the maximum length and the corresponding list\n    return (len(max_len), max_len)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\nfrom functools import lru_cache\n\ndef count_no_of_ways(n, k):\n    # Base case: If there is only one post, return the total number of colors\n    if (n == 1):\n        return k\n    \n    # Base case: If there are two posts, return the total number of combinations of colors\n    if (n == 2):\n        return k * k\n    \n    # Initialize variables to store the results of subproblems\n    mod = 1000000007\n    same = k\n    diff = k * (k - 1)\n    \n    # Iterate from the third post to the nth post\n    for i in range(3, n + 1):\n        # Calculate the new values for 'same' and 'diff'\n        temp_same = diff\n        temp_diff = ((same + diff) * (k - 1)) % mod\n        \n        # Update 'same' and 'diff' for the next iteration\n        same = temp_diff\n        diff = temp_diff\n    \n    # Return the total number of ways to paint the fence\n    return (same + diff) % mod\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(x, y):\n    # Calculate the quotient using integer division\n    return x // y\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\n\ndef otherside_rightangle(a,b):\n    # Calculate the square of the hypotenuse using Pythagorean theorem\n    c_square = (a ** 2) + (b ** 2)\n    \n    # Take the square root to get the length of the hypotenuse\n    c = math.sqrt(c_square)\n    \n    return c\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(mixed):\n    # Filter out non-integer values and find the maximum integer value\n    return max(item for item in mixed if isinstance(item, int))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    # Initialize the sum of divisors with 0\n    sum = 0\n    \n    # Iterate through numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if i is a divisor of n\n        if (n % i == 0):\n            # Add the divisor to the sum\n            sum += i\n            \n    # Return the total sum of divisors\n    return sum\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr,n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    # Initialize an empty list to store the flattened elements\n    flat_list = []\n    \n    # Iterate through each element in the nested list\n    for item in nested_list:\n        # Check if the item is a list\n        if isinstance(item, list):\n            # Extend the flat_list with the flattened version of the item\n            flat_list.extend(flatten_list(item))\n        else:\n            # Append the non-list item directly to the flat_list\n            flat_list.append(item)\n    \n    return flat_list\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\nfrom typing import List\n\ndef intersection_nested_lists(list1: List[int], list2: List[List[int]]) -> List[List[int]]:\n    # Use list comprehension to filter out elements that are not in list1\n    result = [[i for i in sublist if i in list1] for sublist in list2]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\nfrom collections import defaultdict\n\ndef max_aggregate(test_list):\n    # Initialize a defaultdict with integer values\n    res = defaultdict(int)\n    \n    # Iterate through each tuple in the list\n    for key, val in test_list:\n        # Add the value to the corresponding key in the dictionary\n        res[key] += val\n    \n    # Find the key with the maximum value and return it along with the value\n    return (max(res.items(), key=lambda ele: ele[1]))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\nfrom math import comb\n\ndef count_binary_seq(n):\n    # Initialize result with 0\n    res = 0\n    \n    # Iterate over possible counts of '1's in the first half\n    for i in range(n + 1):\n        # Calculate combinations for both halves and add to result\n        res += comb(i, i) * comb(n - i, i)\n    \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\nfrom collections import Mapping\n\n\ndef dict_depth(dic):\n    if isinstance(dic, Mapping):\n        return 1 + (max(map(dict_depth, dic.values())) if dic else 0)\n    return 0\n\n\n# Test case"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    # Initialize result and count variables\n    res = 0\n    count = 0\n    \n    # Iterate through bits of n\n    while (n > 0):\n        # Check if the current bit is set\n        if (n & 1):\n            # Update result with the leftmost set bit found\n            res = (1 << count)\n        \n        # Right shift n by 1 bit\n        n >>= 1\n        # Increment the count of bits processed\n        count += 1\n    \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr,n):\n    # Count inversions of first type\n    inv_count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    # Count inversions of second type\n    inv_count_2 = 0\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if arr[i] < arr[j]:\n                inv_count_2 += 1\n\n    # Check if counts are equal\n    return inv_count == inv_count_2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\nfrom collections import deque\n\ndef find_Element(arr, queries, k, n):\n    # Convert the list into a deque for efficient rotation\n    arr = deque(arr)\n    \n    # Process each query in reverse order\n    for i in range(k - 1, -1, -1):\n        l, r = queries[i]\n        \n        # Rotate the deque to the right by 'l' positions\n        arr.rotate(l)\n        \n        # Check if the current index is within the range [l, r]\n        if l <= n <= r:\n            # Return the element at the new position 'n'\n            return arr[n]\n        \n        # Rotate the deque back to its original state\n        arr.rotate(-l)\n    \n    # If no valid element is found, return None\n    return None\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\nimport re\n\ndef start_withp(text):\n    # Use regular expression to find all words starting with 'p'\n    p_words = re.findall(r'\\b(p\\w*)', text)\n    \n    # Check if there are exactly two such words\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\nfrom bisect import bisect_right\n\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize dp array with zeros\n    dp = [0] * n\n    \n    # Base case: first element in the subsequence\n    dp[0] = arr[0]\n    \n    # Fill the dp array for elements up to i\n    for j in range(1, i + 1):\n        dp[j] = arr[j]\n        for l in range(j):\n            if arr[l] < arr[j]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    \n    # Calculate the maximum sum including the kth element\n    max_sum = dp[i] + arr[k]\n    \n    # Update dp array for elements from i+1 to k-1\n    for j in range(i + 1, k):\n        dp[j] = arr[j]\n        for l in range(bisect_right(dp, arr[j])):\n            if dp[l] < arr[j]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n    \n    # Return the maximum sum including the kth element\n    return max_sum\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, index, value):\n    # Create a new tuple with the specified element replaced\n    result = tuplex[:index] + (value,) + tuplex[index+1:]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\nfrom itertools import combinations\n\ndef large_product(nums1, nums2, N):\n    # Generate all possible pairs of numbers from both lists\n    result = sorted(a * b for a, b in combinations(nums1 + nums2, 2))\n    # Return the last N elements from the sorted list of products\n    return result[-N:]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    # Use the max() function to find and return the maximum of two numbers\n    return max(a, b)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    # Convert the string into a tuple of characters\n    result = tuple(string)\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    # Check if all bits are set (n & -n will be zero)\n    if n & -n == 0:\n        return n + 1\n    \n    # Initialize variables for bit manipulation\n    count = 0\n    temp = n\n    \n    # Iterate through each bit of the number\n    while temp > 0:\n        # If the current bit is not set, set it and break the loop\n        if temp & 1 == 0:\n            n |= (1 << count)\n            break\n        # Move to the next bit\n        temp >>= 1\n        count += 1\n    \n    return n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\nimport math\n\ndef volume_cone(radius, height):\n    # Calculate the base area using the formula for the area of a circle\n    base_area = math.pi * radius ** 2\n    \n    # Calculate the volume using the formula for the volume of a cone\n    volume = (base_area * height) / 3\n    \n    return volume\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n    # Use a generator expression to filter and join positive numbers\n    return \",\".join(str(num) for num in nums if num > 0)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\nfrom sys import maxsize\n\ndef max_sum_rectangular_grid(grid, n):\n    # Initialize variables to store the maximum sums including and excluding the current element\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    \n    # Iterate through the elements starting from the second one\n    for i in range(1, n):\n        # Update the new exclude value as the maximum of previous include and exclude\n        excl_new = max(excl, incl)\n        \n        # Update the include value as the sum of the current element and previous exclude\n        incl = excl + max(grid[0][i], grid[1][i])\n        \n        # Update the exclude value with the new exclude value\n        excl = excl_new\n    \n    # Return the maximum of include and exclude values\n    return max(excl, incl)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\nimport re\n\ndef find_Max_Len_Even(s):\n    # Find all words in the string using regular expression\n    words = re.findall('\\w+', s)\n    \n    # Filter out only the even-length words\n    even_words = [word for word in words if len(word) % 2 == 0]\n    \n    # Return the first maximum length even word found\n    return max(even_words, key=len)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\nfrom bisect import bisect_right\n\ndef find_last_occurrence(arr, x):\n    # Find the rightmost position where `x` can be inserted without violating the order\n    i = bisect_right(arr, x)\n    \n    # If `i` is zero or `arr[i - 1]` is not equal to `x`, then `x` is not present in the array\n    if i == 0 or arr[i - 1] != x:\n        return -1\n    \n    # Return the index of the last occurrence of `x`\n    return i - 1\n\n# Test case"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\nfrom itertools import groupby\n\ndef modified_encode(l):\n    # Use groupby to group consecutive elements and create sublists\n    return [[len(list(group)), key] if len(list(group)) > 1 else key for key, group in groupby(l)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(n):\n    # Initialize variables to store the maximum volume and the corresponding dimensions\n    max_vol = -1\n    x, y, z = 0, 0, 0\n    \n    # Iterate through possible values for x, y, and z\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            k = n - (i + j)\n            \n            # Check if the current combination forms a valid cuboid\n            if k >= j:\n                vol = i * j * k\n                \n                # Update the maximum volume if the current volume is greater\n                if vol > max_vol:\n                    max_vol = vol\n                    x, y, z = i, j, k\n    \n    return max_vol\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(text):\n    # Find all words that are exactly 5 characters long\n    return re.findall(r\"\\b\\w{5}\\b\", text)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    # Calculate the sum of squares of first n natural numbers\n    sum_of_squares = 0\n    for i in range(1, n + 1):\n        sum_of_squares += (i ** 2)\n    \n    # Calculate the square of sum of first n natural numbers\n    square_of_sum = 0\n    for i in range(1, n + 1):\n        square_of_sum += i\n    square_of_sum = square_of_sum ** 2\n    \n    # Return the difference between the two calculated values\n    return square_of_sum - sum_of_squares\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(n):\n    # Calculate the length of the string\n    l = len(n)\n    \n    # Create the first half of the Demlo number\n    first_half = ''.join(str(i) for i in range(1, l + 1))\n    \n    # Create the second half by reversing the first half (excluding the last character)\n    second_half = first_half[:-1][::-1]\n    \n    # Combine both halves to form the complete Demlo number\n    return first_half + second_half\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(nums):\n    # Find the minimum value in the list\n    min_val = min(nums)\n    # Use list comprehension to find all indices where this minimum value occurs\n    result = [index for index, value in enumerate(nums) if value == min_val]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    i = -1\n    for j in range(n):\n        if arr[j] < 0:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    pos, neg = i + 1, 0\n    while True:\n        # check if positive elements are already arranged\n        if pos >= n or neg >= pos or arr[neg] < 0:\n            break\n        # swap elements at wrong positions\n        else:\n            arr[neg], arr[pos] = arr[pos], arr[neg]\n            pos += 2\n            neg += 2\n    return arr\n\n# Test case"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nfrom typing import Tuple\n\ndef sum_of_alternates(test_tup):\n    # Initialize sums for alternate chains\n    res1 = 0\n    res2 = 0\n    \n    # Iterate over the tuple in steps of 2\n    for i in range(0, len(test_tup), 2):\n        res1 += test_tup[i]\n    \n    # Iterate over the tuple starting from index 1 and stepping by 2\n    for i in range(1, len(test_tup), 2):\n        res2 += test_tup[i]\n    \n    # Return the sums as a tuple\n    return (res1, res2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\nfrom math import ceil, sqrt\n\ndef get_Min_Squares(n):\n    # Base cases\n    if n <= 3:\n        return n\n \n    # This variable will store the minimum number of squares needed\n    res = n\n \n    # Go through all smaller numbers and update the result if required\n    for x in range(1, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + get_Min_Squares(n - temp))\n \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\nfrom collections import Counter\n\ndef most_occurrences(strings):\n    # Split each string into words and flatten the list\n    words = [word for sentence in strings for word in sentence.split()]\n    \n    # Count the occurrences of each word using Counter\n    word_counts = Counter(words)\n    \n    # Find the word with the maximum count\n    max_count_word = max(word_counts, key=word_counts.get)\n    \n    return max_count_word\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    # Check if any two sides of the triangle are equal\n    return (a == b) or (b == c) or (c == a)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(nums, k, n):\n    # Calculate the effective rotation needed\n    k = k % n\n    \n    # Perform the rotation using slicing\n    return nums[k:] + nums[:k]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(nums):\n    # Count the number of negative numbers using a generator expression\n    return sum(1 for num in nums if num < 0)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(text):\n    # Find all words with 3 to 5 characters using regex\n    return re.findall(r\"\\b\\w{3,5}\\b\", text)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through each bit position from 0 to the length of n in binary representation\n    for i in range(len(bin(n)) - 2):\n        # Check if the bit at position i is unset (0)\n        if not (n & (1 << i)):\n            # Increment count if the bit is unset\n            count += 1\n            \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nfrom collections import defaultdict\n\ndef char_frequency(str1):\n    dict = defaultdict(int)\n    for n in str1:\n        dict[n] += 1\n    return dict\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(list1):\n    # Sorting the list based on the second element of each sublist\n    return sorted(list1, key=lambda x: x[1])\n\n# Test case"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    # Check if any of the sides is less than or equal to 0\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return False\n    else:\n        return True\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, n, d):\n    # Calculate the sum using the formula for the sum of an arithmetic progression\n    return int(n * (2 * a + (n - 1) * d) / 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\nfrom calendar import monthrange\n\ndef check_monthnum(month_name):\n    # Check if the number of days in the month is exactly 28\n    return monthrange(1900, list(calendar.month_name).index(month_name))[1] == 28\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\nimport re\n\n# Define a regular expression pattern to match a word at the end of a string, optionally followed by punctuation\npattern = '\\w+\\S*$'\n\ndef text_match_word(text):\n    # Use the search method from the re module to find a match in the given text\n    if re.search(pattern,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\nfrom collections import defaultdict\n\ndef count_Substring_With_Equal_Ends(str1):\n    result = 0\n    dict = defaultdict(lambda: 0)\n    \n    for i in range(len(str1)):\n        result += dict[str1[i]]\n        dict[str1[i]] += 1\n    \n    return result + len(str1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\nfrom collections import defaultdict\n\ndef find_Divisor(l,r):\n    # Initialize a dictionary to store divisors and their counts\n    d = defaultdict(int)\n    \n    # Iterate over the range [l, r]\n    for i in range(l, r + 1):\n        # Check all possible divisors from 1 to i\n        for j in range(1, i + 1):\n            if i % j == 0:\n                # Increment the count of the divisor\n                d[j] += 1\n    \n    # Find the maximum occurring divisor\n    max_divisor = max(d, key=d.get)\n    \n    return max_divisor\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\nfrom heapq import nsmallest\n\ndef sum_three_smallest_nums(nums):\n    # Find the three smallest numbers using nsmallest and sum them up\n    return sum(nsmallest(3, nums))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(test_set):\n    # Convert the set to an ordered tuple using sorted()\n    res = tuple(sorted(test_set))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\nfrom heapq import heappop, heappush\nimport math\n\ndef find_minimum_range(arrays):\n    # Initialize variables to store the minimum and maximum values in the current window\n    min_val = float('inf')\n    max_val = -float('inf')\n    \n    # Create a list to store the indices of elements in the current window\n    indices = [-1] * len(arrays)\n    \n    # Initialize a heap with the first element of each array\n    heap = []\n    for i in range(len(arrays)):\n        heappush(heap, (arrays[i][0], i))\n        indices[i] = 0\n    \n    # Iterate until we have exhausted all elements in any of the arrays\n    while True:\n        # Update the minimum value in the current window\n        min_val = min(min_val, heap[0][0])\n        \n        # Update the maximum value in the current window\n        max_val = max(max_val, heap[0][0])\n        \n        # Calculate the current range\n        current_range = max_val - min_val\n        \n        # If this is the first iteration or if the current range is smaller than the previous minimum range,\n        # update the minimum range\n        if indices.count(-1) == 0:\n            min_range = current_range\n        \n        # Move to the next element in the array with the smallest element in the current window\n        _, i = heappop(heap)\n        indices[i] += 1\n        \n        # If we have exhausted all elements in the array with index i, break the loop\n        if indices[i] == len(arrays[i]):\n            break\n        \n        # Push the next element from the array with index i into the heap\n        heappush(heap, (arrays[i][indices[i]], i))\n    \n    return min_range\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    # Initialize counters for digits and letters\n    digit = 0\n    letter = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(string)):\n        # Check if the character is a digit\n        if string[i].isdigit():\n            digit += 1\n        # Check if the character is a letter\n        elif string[i].isalpha():\n            letter += 1\n    \n    # Return the counts as a tuple (letters, digits)\n    return (letter, digit)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\nimport math\n\ndef count_Odd_Squares(start, end):\n    # Calculate the number of perfect squares in the range [start, end]\n    return int(math.sqrt(end)) - int(math.sqrt(start - 1))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\nfrom itertools import pairwise\n\ndef diff_consecutivenums(nums):\n    # Calculate the difference between consecutive numbers using pairwise\n    return [b - a for a, b in pairwise(nums)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\nfrom math import factorial\n\n\ndef zigzag(n, k):\n    # Calculate the binomial coefficient C(n, k)\n    c = factorial(n) // (factorial(k) * factorial(n - k))\n    \n    # Calculate the Entringer number E(n, k)\n    e = c // (n + 1)\n    \n    return e\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(m,n):\n    # If m is smaller than n, swap them\n    if (m < n):\n        m, n = n, m\n\n    # Calculate the total number of squares\n    return int((n * (n + 1) * (2 * n + 1) / 6) + ((m - n) * n * (n + 1) / 2))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\nfrom collections import defaultdict\n\ndef find_ways(n):\n    # Initialize the DP table with default values\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    \n    # Base case: There is one way to generate a sequence of length 0 with sum 0\n    dp[0][0] = 1\n    \n    # Fill the DP table\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            # If we include the value 'i' in the sequence\n            if (j - i >= 0):\n                dp[i][j] += dp[i - 1][j - i]\n            \n            # If we exclude the value 'i' from the sequence\n            dp[i][j] += dp[i - 1][j]\n    \n    # The result is the number of ways to generate a sequence of length 'n' with non-negative prefix sums\n    return dp[n][n]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    # Check if all characters in the string are either '0' or '1'\n    if set(string) == {'0', '1'} or set(string) == {'1'} or set(string) == {'0'}:\n        return (\"Yes\")\n    else:\n        return (\"No\")\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\nfrom collections import Counter\n\ndef minimum_Length(s):\n    # Count the frequency of each character in the string\n    freq = Counter(s)\n    \n    # If there is only one unique character, return the length of the string minus one\n    if len(freq) == 1:\n        return len(s) - 1\n    \n    # Initialize the maximum count of any single character\n    max_count = 0\n    \n    # Iterate through the frequency dictionary to find the maximum count\n    for key, value in freq.items():\n        if value > max_count:\n            max_count = value\n    \n    # Return the length of the string minus the maximum count\n    return len(s) - max_count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr,n,k):\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the array and update the frequency count for each element\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Iterate through the array again to find the first element with frequency k\n    for i in range(n):\n        if freq[arr[i]] == k:\n            return arr[i]\n    \n    # If no element occurs k times, return -1 (indicating failure)\n    return -1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str1):\n    # Convert the string into a set of characters\n    str2 = set(str1)\n    \n    # Compare the length of the original string with the set\n    if len(str1) == len(str2):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(lst, C):\n    # Use list comprehension to create a new list\n    # where each sublist has the element at index C removed\n    return [[row[i] for i in range(len(row)) if i != C] for row in lst]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,d,n):\n    # Calculate the n-th term using the formula for arithmetic progression\n    return a + (n - 1) * d\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\n\ndef count_Rectangles(r):\n    # Calculate the maximum distance from the center to any point on the circle\n    d = (2 * r) ** 2\n    \n    # Initialize a counter for valid rectangles\n    cnt = 0\n    \n    # Iterate over possible values of x1 and y1\n    for x1 in range(-r, r + 1):\n        for y1 in range(-r, r + 1):\n            # Check if the point is within the circle\n            if x1 * x1 + y1 * y1 <= d:\n                # Iterate over possible values of x2 and y2\n                for x2 in range(x1, r + 1):\n                    for y2 in range(y1, r + 1):\n                        # Check if the point is within the circle\n                        if x2 * x2 + y2 * y2 <= d:\n                            # Check if the rectangle formed by (x1, y1), (x2, y2), (-x1, -y1), and (-x2, -y2) is valid\n                            if x1 != x2 or y1 != y2:\n                                cnt += 4\n    \n    return cnt // 8\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    # Calculate the third angle by subtracting the sum of the given angles from 180 degrees\n    c = 180 - (a + b)\n    return c\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\nfrom functools import reduce\n\ndef find_max(test_list):\n    # Use reduce to apply a lambda function that finds the max between two elements\n    res = reduce(lambda x, y: max(x, y), map(max, test_list))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(nums1, nums2):\n    # Use map with a lambda function to perform modulo division\n    result = map(lambda x, y: x % y if y != 0 else None, nums1, nums2)\n    return list(result)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    # Calculate the discriminant\n    d = b * b - 4 * a * c\n    \n    # Check if the roots are real and distinct\n    if (d > 0): \n        # Calculate both roots\n        r1 = (-b + math.sqrt(d)) / (2 * a)\n        r2 = (-b - math.sqrt(d)) / (2 * a)\n        \n        # Check if one root is twice the other\n        if ((r1 == 2 * r2) or (r2 == 2 * r1)): \n            return (\"Yes\") \n        else: \n            return (\"No\") \n    else: \n        return (\"No\")\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    # Calculate the Carol number using the formula (2^n - 1)^2 - 2\n    return ((2 ** n) - 1) * ((2 ** n) - 1) - 2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\nfrom collections import deque\n\n# Function to remove empty lists from a given list of lists\ndef remove_empty(lst):\n    # Use deque for efficient popping from the left\n    lst = deque(lst)\n    \n    while True:\n        try:\n            # Remove the first empty list found\n            lst.remove([])\n        except ValueError:\n            # If no more empty lists are found, break the loop\n            break\n    \n    return list(lst)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\nfrom collections import Counter\n\ndef max_occurrences(nums):\n    # Count the occurrences of each element in the list\n    counts = Counter(nums)\n    \n    # Find the element with the maximum occurrence\n    max_item = max(counts, key=counts.get)\n    \n    return max_item\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\nfrom typing import List, Tuple\n\ndef add_K_element(test_list: List[Tuple[int]], K: int) -> List[Tuple[int]]:\n    # Use list comprehension and map to add K to each element in the tuples\n    res = [tuple(map(lambda ele: ele + K, sub)) for sub in test_list]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nfrom collections import defaultdict\n\ndef get_min_flips(str1):\n    # Initialize counters for both possible starting characters\n    flip1 = 0\n    flip2 = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(str1)):\n        # Check if the current character matches the expected character for flip1\n        if (i % 2 == 0 and str1[i] != '0') or (i % 2 == 1 and str1[i] != '1'):\n            flip1 += 1\n        # Check if the current character matches the expected character for flip2\n        if (i % 2 == 0 and str1[i] != '1') or (i % 2 == 1 and str1[i] != '0'):\n            flip2 += 1\n            \n    # Return the minimum of the two flip counts\n    return min(flip1, flip2)\n\ndef min_flip_to_make_string_alternate(string):\n    # Get the length of the input string\n    n = len(string)\n    \n    # If the length is odd, one of the two patterns will have an extra character\n    if n & 1:\n        # Create two dictionaries to store the count of characters for each pattern\n        dict1 = defaultdict(int)\n        dict2 = defaultdict(int)\n        \n        # Count the occurrences of '0' and '1' in the string\n        for i in range(n):\n            if i & 1:\n                dict1[string[i]] += 1\n            else:\n                dict2[string[i]] += 1\n        \n        # Calculate the minimum flips required for each pattern\n        ans1 = abs(dict1['0'] - dict1['1']) + abs(dict2['0'] - dict2['1'])\n        ans2 = abs(dict1['0'] - dict2['1']) + abs(dict2['0'] - dict1['1'])\n        \n        # Return the minimum of the two calculated values\n        return min(ans1, ans2) // 2\n    else:\n        # If the length is even, calculate the minimum flips directly\n        return get_min_flips(string)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    # Initialize digit counter to zero\n    digit = 0\n    \n    # Loop until n becomes zero\n    while (n != 0):\n        # Remove the last digit from n\n        n //= 10\n        # Increment the digit counter\n        digit += 1\n    \n    return digit\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(list_nums):\n    # Calculate the maximum product of adjacent pairs using list comprehension and max function\n    return max(a * b for a, b in zip(list_nums[:-1], list_nums[1:]))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\ndef height(node):\n    # Base case: an empty node has a height of 0\n    if node is None:\n        return 0\n    # Recursively calculate the height of each subtree\n    left_height = height(node.left)\n    right_height = height(node.right)\n    # The height of the current node is the maximum of the heights of its subtrees plus one\n    return max(left_height, right_height) + 1\n\ndef is_tree_balanced(root):\n    # An empty tree is considered balanced\n    if root is None:\n        return True\n    \n    # Calculate the height of the left and right subtrees\n    left_height = height(root.left)\n    right_height = height(root.right)\n    \n    # Check if the difference in heights is at most 1 and both subtrees are balanced\n    if abs(left_height - right_height) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right):\n        return True\n    \n    # If any condition fails, the tree is not balanced\n    return False\n\n# Test the function with a sample input\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.right.right = Node(6)\nroot.right.right.right = Node(7)\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\nfrom typing import Tuple\n\ndef repeat_tuples(test_tup: Tuple[int], N: int) -> Tuple[Tuple[int]]:\n    # Repeat the tuple N times using tuple multiplication\n    res = test_tup * N\n    return (res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length, width, height):\n    # Calculate the lateral surface area of the cuboid\n    return 2 * height * (length + width)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(test_list):\n    # Sort the list of tuples based on the float value of the second element in descending order\n    res = sorted(test_list, key=lambda ele: float(ele[1]), reverse=True)\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    # Base case: if the start index is greater than the end index, return the start index\n    if start > end:\n        return start\n    \n    # Calculate the middle index\n    mid = start + (end - start) // 2\n    \n    # If the value at the middle index is equal to its index, search in the right half\n    if arr[mid] == mid:\n        return smallest_missing(arr, mid + 1, end)\n    \n    # Otherwise, search in the left half\n    else:\n        return smallest_missing(arr, start, mid - 1)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq as hq\n\ndef heap_assending(nums):\n    # Create an empty list to store the sorted elements\n    result = []\n    \n    # Convert the input list into a min-heap\n    hq.heapify(nums)\n    \n    # Extract the smallest element from the heap and append it to the result list\n    while nums:\n        result.append(hq.heappop(nums))\n    \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length, width, height):\n    # Calculate the volume by multiplying length, width, and height\n    return length * width * height\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nfrom itertools import permutations\n\n\ndef permute_string(s):\n    # Generate all permutations using itertools.permutations\n    perms = [''.join(p) for p in permutations(s)]\n    return list(set(perms))  # Convert the set back to a list and return\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\nimport math\n\ndef round_num(num, multiple):\n    # Calculate the lower multiple\n    lower = (num // multiple) * multiple\n    # Calculate the upper multiple\n    upper = lower + multiple\n    \n    # Return the closest multiple to the original number\n    return upper if num - lower > upper - num else lower\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nfrom collections import Counter\n\ndef remove_replica(test_tup):\n    # Count occurrences of each element in the tuple\n    res = Counter(test_tup)\n    \n    # Replace elements occurring more than once with 'MSP'\n    res = tuple('MSP' if ele > 1 else ele for ele in test_tup)\n    \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str1, C):\n    # Use list comprehension to filter out the character and join the result\n    return ''.join([ch for ch in str1 if ch != C])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(nums):\n    # Check if the list is not empty\n    if len(nums) > 0:\n        # Remove the last element and insert it at the beginning of the list\n        nums.insert(0, nums.pop())\n    return nums\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(l,b,h):\n    # Calculate the surface area using the formula 2*(lb + bh + hl)\n    return 2 * (l * b + b * h + h * l)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(rows, cols):\n    # Create a list of lists using list comprehension\n    return [[row * col for col in range(cols)] for row in range(rows)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\nfrom operator import itemgetter\n\ndef index_on_inner_list(test_list, K):\n    # Sort the list of lists based on the K-th element of each inner list\n    res = sorted(test_list, key=itemgetter(K))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef binary_search(arr, low, high):\n    # Check if the array is already sorted\n    if arr[low] <= arr[high]:\n        return low\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        # Check if mid is the minimum element\n        next_index = (mid + 1) % len(arr)\n        prev_index = (mid - 1 + len(arr)) % len(arr)\n\n        if arr[mid] <= arr[next_index] and arr[mid] <= arr[prev_index]:\n            return mid\n\n        # Decide which part to search based on the middle element\n        if arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\ndef find_rotation_count(arr):\n    n = len(arr)\n    return binary_search(arr, 0, n - 1)\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    # Initialize variables to keep track of the current bit position and result\n    i = 0\n    res = 0\n    \n    # Iterate through each bit of the number\n    while n > 0:\n        # Check if the current bit is at an even position (0-indexed)\n        if i % 2 == 0:\n            # Set the corresponding bit in the result\n            res |= (1 << i)\n        \n        # Move to the next bit position\n        i += 1\n        # Shift the number right by one bit\n        n >>= 1\n    \n    # XOR the original number with the result to toggle the even bits\n    return n ^ res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(n, arr):\n    # Find the minimum value in the array\n    min_val = min(arr)\n    \n    # Count how many times the minimum value appears in the array\n    count = arr.count(min_val)\n    \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\nfrom functools import lru_cache\n\n# Using memoization to optimize recursive calls\n@lru_cache(None)\ndef get_perrin(n):\n    # Base cases for the first three Perrin numbers\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    # Recursive relation for Perrin numbers\n    return get_perrin(n - 2) + get_perrin(n - 3)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\nfrom collections import deque\n\ndef swap_count(s):\n    stack = []\n    queue = deque()\n    \n    # Iterate through each character in the string\n    for i, char in enumerate(s):\n        if char == '[':\n            stack.append(i)\n        else:\n            if not stack:\n                queue.append(i)\n            else:\n                stack.pop()\n    \n    # Calculate the number of swaps required\n    count = 0\n    while queue:\n        index = queue.popleft()\n        if stack:\n            stack.pop()\n        else:\n            continue\n        \n        # Calculate the distance between the current and next index\n        dist = index - stack[-1] - 1\n        count += dist // 2\n    \n    return count\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    # Check if the last character of the hexadecimal number is in '02468ACE'\n    if hex_num[-1] in '02468ACE':\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\nimport math\n\ndef highest_Power_of_2(n):\n    # Calculate the logarithm base 2 of n and take the floor value\n    return int(math.pow(2, math.floor(math.log2(n))))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\nfrom functools import lru_cache\n\n# Using memoization with lru_cache decorator to cache results of previous computations\n@lru_cache(None)\ndef find_lucas(n):\n    # Base cases for the first two Lucas numbers\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # Recursive relation to compute the n'th Lucas number\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n# Define a function to insert a given string at the beginning of all items in a list\ndef add_string(items, string_pattern):\n    # Use list comprehension and format method to insert the string pattern at the beginning of each item\n    return [string_pattern.format(i) for i in items]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\nfrom itertools import zip_longest\n\ndef convert_list_dictionary(list1, list2, list3):\n    # Use list comprehension and zip_longest to create the nested dictionary\n    result = [{key1: {key2: key3}} for key1, key2, key3 in zip_longest(list1, list2, list3)]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\nfrom collections import defaultdict\n\ndp = defaultdict(int)\n\n\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    # Check if the result is already computed\n    if dp[n] != 0:\n        return dp[n]\n    \n    # Compute the result recursively and store it in the dictionary\n    dp[n] = max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n    \n    return dp[n]\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\nfrom operator import itemgetter\n\ndef max_length_list(lst):\n    # Find the index of the list with the maximum length\n    max_len_index = max(range(len(lst)), key=itemgetter(1))\n    # Return the length and the corresponding list\n    return (len(lst[max_len_index]), lst[max_len_index])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\nfrom collections import Counter\n\ndef check_distinct(test_tup):\n    # Count occurrences of each element in the tuple\n    res = Counter(test_tup)\n    # Check if any element occurs more than once\n    return max(res.values()) > 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\nfrom collections import OrderedDict\n\n\ndef first_non_repeating_character(s):\n    # Create an ordered dictionary to store characters and their counts\n    char_count = OrderedDict()\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(string):\n    # Regex pattern to match strings that start and end with the same character\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    \n    # Check if the string matches the pattern\n    if re.search(pattern, string):\n        return (\"Valid\")\n    else:\n        return (\"Invalid\")\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x, y, z):\n    # Sort the numbers and return the middle one as the median\n    if (x < y < z) or (z < y < x):\n        return float(y)\n    elif (y < x < z) or (z < x < y):\n        return float(x)\n    else:\n        return float(z)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\nfrom functools import reduce\n\ndef sum_of_digits(nums):\n    # Use map to apply lambda that calculates the sum of digits for each number\n    result = map(lambda x: reduce(lambda y,z:y+z,[int(d) for d in str(x)]), nums)\n    return reduce(lambda x,y:x+y, result)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\nfrom functools import reduce\nimport operator\n\ndef bitwise_xor(test_tup1, test_tup2):\n    # Perform bitwise XOR using reduce and operator.xor\n    res = tuple(reduce(operator.xor, pair) for pair in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\nfrom collections import defaultdict\n\ndef extract_freq(test_list):\n    res = defaultdict(int)\n    for sub in test_list:\n        # Convert tuple to string and count its occurrence\n        res[str(sub)] += 1\n    \n    # Filter out tuples that appear more than once\n    res = {key: val for key, val in res.items() if val > 1}\n    \n    return len(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\nfrom operator import add\n\ndef add_nested_tuples(test_tup1, test_tup2):\n    # Perform index-wise addition using map and lambda\n    res = tuple(map(lambda x, y: tuple(map(add, x, y)), test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nfrom math import factorial\n\ndef ncr_modp(n, r, p):\n    # Calculate nCr using the formula (n! / ((r! * (n-r)!) % p)) % p\n    return (factorial(n) // (factorial(r) * factorial(n - r))) % p\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n    # Regular expression pattern for validating URLs\n    regex = (\n        r\"((http|https)://)(www\\.)?\"\n        r\"[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\"\n        r\"\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%\"\n        r\"._\\+~#?&//=]*)\"\n    )\n    \n    # Compile the regular expression pattern\n    pattern = re.compile(regex)\n    \n    # Check if the URL matches the pattern\n    if url is None:\n        return False\n    if re.search(pattern, url):\n        return True\n    else:\n        return False\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a,b):\n    # Use the min() function to find the minimum of two numbers\n    return min(a, b)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n    # Check if the element is in the tuple using 'in' keyword\n    return element in tuplex\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\nfrom functools import reduce\n\ndef find_Parity(n):\n    # Use reduce to XOR all bits in n\n    x = reduce(lambda x, y: x ^ y, [int(i) for i in bin(n)[2:]])\n    \n    # Check if the result is 0 or 1 and return the corresponding parity\n    if x == 0:\n        return \"No Parity\"\n    elif x == 1:\n        return \"Odd Parity\"\n    else:\n        return \"Even Parity\"\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\nfrom itertools import permutations\n\n\ndef rearrange_bigger(n):\n    # Generate all possible permutations of the digits\n    perms = [''.join(p) for p in permutations(str(n))]\n    \n    # Convert each permutation back to an integer and filter out those greater than the original number\n    result = [int(x) for x in perms if int(x) > n]\n    \n    # Return the smallest number from the filtered list or -1 if no such number exists\n    return min(result) if result else -1\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\nfrom itertools import product\nimport heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Generate all possible pairs using product\n    pairs = list(product(nums1, nums2))\n    \n    # Use a min-heap to get the k smallest pairs based on their sum\n    result = heapq.nsmallest(k, pairs, key=sum)\n    \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nfrom functools import reduce\n\ndef min_product_tuple(test_list):\n    # Calculate the minimum product using reduce and lambda functions\n    res = reduce((lambda x, y: x * y[0] if x * y[0] < y[1] else y[1]), test_list)\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(mixed):\n    # Filter out non-integer values and find the minimum integer value\n    return min(item for item in mixed if isinstance(item, int))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\n\ndef snake_to_camel(snake_str):\n    # Use regex to find all occurrences of '_[a-z]' and replace them with their uppercase counterpart without the underscore\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), snake_str)\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    # Use list comprehension to filter out odd numbers\n    return [x for x in lst if x % 2 == 0]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(test_list, N):\n    # Extract the Nth element from each tuple in the list\n    res = [sub[N] for sub in test_list]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(list1, list2):\n    # Check if any element of list1 is present in list2\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\nfrom itertools import combinations\ndef max_Product(arr):\n    # Generate all possible pairs using combinations\n    pairs = list(combinations(arr, 2))\n    \n    # Calculate the product for each pair and store in a dictionary\n    products = {pair: x * y for pair, x, y in zip(pairs, arr, arr[1:])}\n    \n    # Find the pair with the maximum product\n    max_pair = max(products, key=products.get)\n    \n    return max_pair\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    # Initialize an array to store the maximum sum for each number from 0 to n\n    dp = [0] * (n + 1)\n    \n    # Iterate through each number from 1 to n\n    for i in range(1, n + 1):\n        # Calculate the maximum sum by either taking the number as it is or breaking it into three parts\n        dp[i] = max(dp[i // 2] + dp[i // 3] + dp[i // 4], i)\n    \n    # Return the maximum sum for the given number n\n    return dp[n]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\nfrom itertools import groupby\n\ndef group_tuples(test_list):\n    res = [tuple(key) for key, val in groupby(sorted(test_list))]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\nfrom operator import itemgetter\n\ndef Find_Max(test_list):\n    # Use max with key=itemgetter(0) to find the sublist with the maximum length\n    res = max(test_list, key=itemgetter(0))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\nfrom math import ceil\n\ndef round_and_sum(nums):\n    # Calculate the total sum after rounding each number in the list\n    total_sum = sum(ceil(abs(num)) for num in nums)\n    \n    # Multiply the total sum by the length of the list\n    result = total_sum * len(nums)\n    \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    # Calculate the cube sum using the formula: (4*n*(n + 1)*(2*n + 1)) // 3\n    return int((4 * n * (n + 1) * (2 * n + 1)) // 3)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\nfrom typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple) -> str:\n    # Convert each element in the tuple to string and join with '-'\n    res = '-'.join(str(ele) for ele in test_tup)\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum = (n * (n + 1)) // 2\n    # Calculate the cube of the sum\n    cube_sum = sum ** 3\n    \n    # Calculate the average by dividing the cube sum by n\n    avg = cube_sum / n\n    \n    return avg\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(gold, m, n):\n    # Create a table for storing intermediate results and initialize it to zero\n    dp = [[0 for x in range(n)] for x in range(m)]\n    \n    # Iterate over each cell in the gold matrix from bottom-right to top-left\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            # Gold collected on right side (including current cell)\n            right = 0 if col == n-1 else dp[row][col+1]\n            \n            # Gold collected on diagonal right up (including current cell)\n            right_up = 0 if row == 0 or col == n-1 else dp[row-1][col+1]\n            \n            # Gold collected on diagonal right down (including current cell)\n            right_down = 0 if row == m-1 or col == n-1 else dp[row+1][col+1]\n            \n            # Maximum gold collected from current cell\n            dp[row][col] = gold[row][col] + max(right, right_up, right_down)\n    \n    # Return the maximum gold collected starting from any cell in the first column\n    return max(dp[i][0] for i in range(m))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(test_tup):\n    # Extract the last character from each string using list comprehension\n    res = [sub[-1] for sub in test_tup]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nfrom collections import Counter\n\ndef count_element_in_list(lst, x):\n    # Count occurrences of each sublist using Counter\n    counts = Counter(tuple(sublist) for sublist in lst)\n    \n    # Calculate the total number of elements that are not equal to x\n    total_not_equal_to_x = sum(count * (len(sublist) - sublist.count(x)) for sublist, count in counts.items())\n    \n    # Calculate the total number of elements in all sublists\n    total_elements = sum(len(sublist) for sublist in lst)\n    \n    # The result is the difference between total elements and total not equal to x\n    return total_elements - total_not_equal_to_x\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(nums):\n    # Use the filter() function with a lambda function to filter out odd numbers\n    result = list(filter(lambda x: (x % 2 != 0), nums))\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date):\n    # Use regex to match the year, month, and day parts\n    return '-'.join(reversed(re.findall(r'\\d{4}|\\d{1,2}', date)))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\nfrom operator import sub\n\ndef and_tuples(test_tup1, test_tup2):\n    # Calculate the element-wise difference using subtraction\n    res = tuple(sub(a, b) for a, b in zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\nfrom sympy import symbols, Eq, solve\n\ndef parabola_directrix(a,b,c):\n    # Define the variable x\n    x = symbols('x')\n    \n    # Create an equation for the parabola: ax^2 + bx + c = 0\n    eqn = Eq(a*x**2 + b*x + c, 0)\n    \n    # Solve the equation for x\n    solutions = solve(eqn, x)\n    \n    # Calculate the sum of the solutions\n    sum_of_solutions = sum(solutions)\n    \n    # Calculate the product of the solutions\n    product_of_solutions = solutions[0] * solutions[1]\n    \n    # Calculate the directrix using the formula: (b^2 - 4ac) / (4a)\n    directrix = (b**2 - 4*a*c) / (4*a)\n    \n    return int(directrix)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    # Check if there is any common element between the two lists using set intersection\n    return bool(set(list1) & set(list2))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(base_a, base_b, height):\n    # Calculate the median using the formula: (base_a + base_b) / 2\n    return (base_a + base_b) / 2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, n):\n    # Check if all elements in the array are less than the given number\n    if all(x < n for x in arr):\n        return 'Yes, entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\nimport re\n\n# Define the regular expression pattern to match 'a' followed by one or more 'b's\npattern = r\"ab+\"\n\ndef text_match_one(text):\n    # Use re.match to check if the pattern is found at the beginning of the text\n    if re.match(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    # Return the last digit by using modulo operator\n    return n % 10\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(list):\n    # Use a generator expression to filter and collect negative numbers\n    return tuple(x for x in list if x < 0)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s):\n    # Use list comprehension to filter out odd-indexed characters\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 1])\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nfrom collections import defaultdict\n\ndef count_bidirectional(test_list):\n    # Initialize a dictionary with default value as an empty set\n    res = defaultdict(set)\n    \n    # Iterate through each pair in the list\n    for x, y in test_list:\n        # Add both (x, y) and (y, x) to the corresponding sets\n        res[x].add(y)\n        res[y].add(x)\n    \n    # Count the number of sets that have exactly two elements\n    res = sum(len(val) == 2 for val in res.values())\n    \n    return str(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\nfrom functools import reduce\n\ndef multiple_to_single(nums):\n    # Use reduce to concatenate the numbers as strings and then convert back to an integer\n    return int(reduce(lambda x, y: str(x) + str(y), nums))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\nimport re\n\ndef find_adverb_position(text):\n    # Find all occurrences of words ending with 'ly'\n    for match in re.finditer(r\"\\w+ly\", text):\n        # Return the start and end positions along with the matched adverb\n        return (match.start(), match.end(), match.group(0))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(a):\n    # Calculate the surface area using the formula 6 * a^2\n    return (6 * a * a)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    # Count the number of positive elements in the array\n    pos = [i for i in arr if i > 0]\n    \n    # Calculate the ratio of positive numbers\n    return len(pos) / len(arr)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(l):\n    # Initialize the largest negative number to None\n    largest = None\n    \n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is negative and either largest is None or the current number is larger than the largest found so far\n        if num < 0 and (largest is None or num > largest):\n            # Update the largest negative number\n            largest = num\n    \n    # Return the largest negative number found\n    return largest\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\nfrom operator import itemgetter\n\ndef trim_tuple(test_list, K):\n    # Use map and itemgetter to trim each tuple from both ends\n    res = str(list(map(itemgetter(K, -K - 1), test_list)))\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\nfrom operator import mul\n\ndef index_multiplication(test_tup1, test_tup2):\n    # Perform index-wise multiplication using map and mul from operator\n    res = tuple(map(mul, *test_tup1, *test_tup2))\n    return (res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\nfrom collections import Counter\n\ndef count_Occurrence(test_tup, K):\n    res = sum([test_tup.count(ele) for ele in K])\n    return (res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    # Using map with a lambda function to calculate the cube of each element\n    result = list(map(lambda x: x ** 3, nums))\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\nfrom functools import lru_cache\n\n# Using memoization to optimize the recursive calculation\n@lru_cache(None)\ndef perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        # Recursive relation for Perrin sequence\n        return perrin(n - 2) + perrin(n - 3)\n\ndef cal_sum(n):\n    # Calculate the sum of the first n Perrin numbers\n    return sum(perrin(i) for i in range(n))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\nfrom math import sqrt\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the lengths of all sides\n    AB = sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    BC = sqrt((x3 - x2)**2 + (y3 - y2)**2)\n    CA = sqrt((x1 - x3)**2 + (y1 - y3)**2)\n\n    # Check if any side is zero\n    if AB == 0 or BC == 0 or CA == 0:\n        return 'No'\n\n    # Check the triangle inequality theorem\n    if (AB + BC > CA) and (BC + CA > AB) and (CA + AB > BC):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\nfrom operator import itemgetter\n\ndef extract_string(list1, n):\n    # Use itemgetter to sort the list by string length\n    result = sorted(list1, key=itemgetter(0), reverse=True)\n    # Filter and return strings with length greater than or equal to n\n    return [word for word in result if len(word) >= n]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(text):\n    # Use regex to replace one or more whitespace characters with an empty string\n    return re.sub(r'\\s+', '', text)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(cost_price,selling_price):\n    # Check if selling price is greater than cost price\n    if selling_price > cost_price:\n        # Calculate the loss amount\n        loss = selling_price - cost_price\n        return loss\n    else:\n        # Return None if there is no loss\n        return None\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    # Initialize result\n    res = 0\n    \n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n and is even\n        if (n % i == 0 and i % 2 == 0):\n            res += i\n            \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\nimport re\n\n# Define the regex pattern to match words containing 'z'\npattern = '\\w*z.\\w*'\n\ndef text_match_wordz(text):\n    # Search for the pattern in the given text\n    if re.search(pattern,  text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    # Check if the month has 31 days\n    return month in [1, 3, 5, 7, 8, 10, 12]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    # Reverse each string in the list using list comprehension\n    reversed_list = [s[::-1] for s in string_list]\n    return reversed_list\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\nfrom operator import itemgetter\n\ndef Find_Min(list1):\n    # Find the sublist with the minimum length using itemgetter\n    min_list = min(list1, key=itemgetter(0))\n    return min_list\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    # Calculate the area by multiplying length and width\n    return length * width\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(str1):\n    # Use regex to replace all uppercase letters with an empty string\n    result = re.sub('[A-Z]', '', str1)\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\nfrom operator import itemgetter\n\ndef Extract(test_list):\n    # Using map() and itemgetter()\n    res = list(map(itemgetter(0), test_list))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    # Initialize counter for uppercase characters\n    ctr = 0\n    \n    # Iterate through each character in the string\n    for char in str:\n        # Check if the character is an uppercase letter\n        if char >= 'A' and char <= 'Z':\n            ctr += 1\n    \n    return ctr\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\nfrom itertools import combinations\n\ndef combinations_list(nums):\n    return [list(comb) for i in range(len(nums) + 1) for comb in combinations(nums, i)]\n\n# Test case"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nfrom math import inf\n\ndef max_subarray_product(arr):\n    # Initialize variables to store the maximum and minimum products so far\n    min_prod = arr[0]\n    max_prod = arr[0]\n    \n    # Variable to store the final result\n    result = arr[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        num = arr[i]\n        \n        # Update the minimum and maximum products considering the current number\n        temp_max = max(num, max_prod * num, min_prod * num)\n        min_prod = min(num, max_prod * num, min_prod * num)\n        max_prod = temp_max\n        \n        # Update the result with the maximum product found so far\n        if max_prod > result:\n            result = max_prod\n    \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\nfrom operator import itemgetter\n\ndef check_value(students, n):\n    # Check if all values in the dictionary are equal to n\n    return all(itemgetter(1)(i) == n for i in students.items())\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\nfrom collections import OrderedDict\n\n# Function to drop empty items from a dictionary\ndef drop_empty(dict1):\n    # Use OrderedDict to preserve the order of items and filter out None values\n    result = OrderedDict((key, value) for key, value in dict1.items() if value is not None)\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nfrom typing import List\n\ndef find_peak(arr: List[int], n: int) -> int:\n    # Iterate through the array from the second element to the second last element\n    for i in range(1, n - 1):\n        # Check if the current element is greater than its neighbors\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            return i\n    \n    # If no peak is found, return -1 (though the problem guarantees a peak exists)\n    return -1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    # Convert the decimal number to an octal string and remove the '0o' prefix\n    return int(oct(n).replace(\"0o\", \"\"))\n    \n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    # Initialize the result with the minimum possible integer value\n    res = -2147483648\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        temp = arr[i]\n        \n        # Check all subsequent elements\n        for j in range(i + 1, n):\n            if (temp < arr[j]):\n                temp *= arr[j]\n                res = max(res, temp)\n    \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nfrom sys import maxsize\n\ndef max_profit(price, k):\n    n = len(price)\n    \n    # Create a table to store results of subproblems\n    profit = [[0 for x in range(n)]for y in range(k + 1)]\n    \n    # Profit is 0 if we can't make any transaction (i.e., k=0) or there are no days (i.e., n=0)\n    for i in range(0, n):\n        profit[0][i] = 0\n    \n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            profit[i][j] = max(profit[i][j-1], price[j] + max_diff)\n            max_diff = max(max_diff, profit[i-1][j] - price[j])\n    \n    return profit[k][n-1]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\nfrom itertools import islice\n\ndef add_pairwise(test_tup):\n    # Initialize an empty list to store the results\n    res = []\n    \n    # Iterate over pairs of elements from the tuple using islice\n    for x, y in zip(test_tup, islice(test_tup, 1, None)):\n        # Add the pair and append to the result list\n        res.append(x + y)\n    \n    return tuple(res)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, mod):\n    mul = 1\n    \n    for i in range(n):\n        mul = (mul * (arr[i] % mod)) % mod\n    \n    return mul % mod\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(nums):\n    # Check if all elements in the sorted list are consecutive\n    return all(b - a == 1 for a, b in zip(sorted(nums), sorted(nums)[1:]))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\nfrom typing import List, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple[int]], test_list2: List[Tuple[int]]) -> set:\n    # Convert each tuple in both lists to sorted tuples and create sets\n    res = set(map(tuple, map(sorted, test_list1))) & set(map(tuple, map(sorted, test_list2)))\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\nimport re\n\ndef replace_char(string, old_char, new_char):\n    # Use regular expression to replace all occurrences of the old character with the new character\n    return re.sub(old_char, new_char, string)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nfrom collections import Counter\n\ndef sort_counter(counter):\n    # Sort the counter by value in descending order and return as a list of tuples\n    sorted_items = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    # Calculate the sum of the maximum and minimum values in the array\n    return max(arr) + min(arr)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\nimport re\n\ndef is_lower(text):\n    # Check if all characters in the text are lowercase\n    return bool(re.match('[a-z ]*', text))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\nimport re\n\ndef remove_lowercase(text):\n    # Use regular expression to replace all lowercase letters with an empty string\n    result = re.sub('[a-z]', '', text)\n    return (result)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\nimport math\n\n\ndef first_Digit(n):\n    # Convert the number to positive if it's negative\n    n = abs(n)\n    \n    # Divide the number by 10 until it becomes a single digit\n    while n >= 10:\n        n = int(n / 10)\n    \n    return int(n)\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\nfrom collections import Counter\n\ndef get_max_occuring_char(str1):\n    # Count the occurrences of each character\n    dict = Counter(str1)\n    \n    # Find the character with the maximum occurrence\n    max_char = max(dict, key=dict.get)\n    \n    return max_char\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\nfrom typing import List\n\ndef is_subset_sum(arr: List[int], n: int, sum_val: int) -> bool:\n    # Create a DP table to store results of subproblems\n    dp = [[False] * (sum_val + 1) for _ in range(n + 1)]\n    \n    # Initialize the first column to True because a subset with sum 0 is always possible\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Fill the DP table\n    for i in range(1, n + 1):\n        for j in range(1, sum_val + 1):\n            # If the current item's value is less than or equal to the current sum\n            if arr[i - 1] <= j:\n                # Check if including the item leads to a solution or excluding it does\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                # If the current item's value is greater than the current sum, exclude it\n                dp[i][j] = dp[i - 1][j]\n    \n    # The result will be stored in the last cell of the DP table\n    return dp[n][sum_val]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\n\ndef match(text):\n    # Regex pattern to match one uppercase letter followed by lowercase letters\n    return 'Yes' if re.search('[A-Z][a-z]+', text) else 'No'\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\nfrom math import factorial\n\ndef first_Factorial_Divisible_Number(x):\n    # Start with the smallest natural number\n    n = 1\n    \n    # Loop until we find the desired number\n    while True:\n        # Calculate the factorial of n\n        fact_n = factorial(n)\n        \n        # Check if the factorial is divisible by x\n        if fact_n % x == 0:\n            return n\n        \n        # Move to the next natural number\n        n += 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\nfrom typing import List, Tuple\n\ndef remove_matching_tuple(test_tup1: List[Tuple[str]], test_tup2: List[Tuple[str]]) -> List[Tuple[str]]:\n    # Use list comprehension to filter out matching tuples\n    res = [tup for tup in test_tup1 if tup not in test_tup2]\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, n):\n    # Initialize the maximum palindrome to a very small value\n    max_pal = -1\n    \n    # Iterate through each element in the array\n    for i in range(n):\n        # Check if the current element is a palindrome and greater than the current maximum\n        if arr[i] > max_pal and str(arr[i]) == str(arr[i])[::-1]:\n            # Update the maximum palindrome found so far\n            max_pal = arr[i]\n    \n    # Return the largest palindrome found\n    return max_pal\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nfrom math import comb\n\n\ndef binomial_probability(n, k, p):\n    # Calculate the binomial coefficient using comb()\n    binom_coeff = comb(n, k)\n    \n    # Calculate the probability of k successes in n trials\n    prob = binom_coeff * (p ** k) * ((1 - p) ** (n - k))\n    \n    return prob\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef last(n):\n    # Return the last element of the tuple\n    return n[-1]\n\ndef sort_tuple(tuples):\n    # Sort the list of tuples based on the last element of each tuple\n    return sorted(tuples, key=last)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nfrom math import tan, pi\n\ndef area_pentagon(a):\n    # Calculate the area using the formula for a regular pentagon\n    return (a * a * 5) / (4 * tan(pi / 5))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(n, arr):\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Count how many times the maximum element appears in the array\n    frequency = arr.count(max_element)\n    \n    return frequency\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(test_list):\n    # Use set comprehension to filter and collect symmetric pairs\n    res = {tuple(sorted(sub)) for sub in test_list if test_list.count(sub) > 1}\n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\nimport math\n\n\ndef sum_gp(a, n, r):\n    # Check if the common ratio is 1\n    if (r == 1):\n        return a * n\n    \n    # Calculate the sum of geometric progression\n    sum = (a * (1 - math.pow(r, n))) / (1 - r)\n    \n    return int(sum)\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\nfrom bisect import bisect_left\n\n\ndef binary_search(arr, x):\n    # Find the index where `x` should be inserted to maintain sorted order\n    i = bisect_left(arr, x)\n    \n    # Check if `i` is within the bounds of the array and if the element at `i` is equal to `x`\n    return (i < len(arr)) and arr[i] == x\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\nimport math\n\ndef calculate_polygons(x_start, y_start, width, height, radius):\n    # Calculate the side length of the hexagon\n    side_length = 2 * radius / math.sqrt(3)\n    \n    # Calculate the distance between the centers of two adjacent hexagons\n    center_distance = side_length\n    \n    # Calculate the number of hexagons that can fit in the given width and height\n    num_hexes_x = int(width / center_distance) + 1\n    num_hexes_y = int(height / (math.sqrt(3) * radius)) + 1\n    \n    # Initialize an empty list to store the hexagon coordinates\n    hexagon_coords = []\n    \n    # Loop through each row of hexagons\n    for i in range(num_hexes_y):\n        # Calculate the starting y-coordinate for this row\n        y_offset = y_start + i * (radius * 3 / 2)\n        \n        # Loop through each hexagon in this row\n        for j in range(num_hexes_x):\n            # Calculate the starting x-coordinate for this hexagon\n            x_offset = x_start + j * center_distance\n            \n            # Calculate the six vertices of the hexagon\n            vertices = [\n                (x_offset, y_offset),\n                (x_offset + side_length / 2, y_offset + radius),\n                (x_offset + side_length, y_offset),\n                (x_offset + side_length / 2, y_offset - radius),\n                (x_offset, y_offset),\n                (x_offset -"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\nfrom functools import reduce\n\ndef binary_to_integer(binary):\n    # Convert each binary digit to an integer and then join them\n    binary_str = ''.join(str(bit) for bit in binary)\n    \n    # Convert the binary string to an integer using base 2\n    return str(int(binary_str, 2))\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(text):\n    # Use regex to replace all lowercase letters with an empty string\n    return re.sub('[a-z]', '', text)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nimport heapq as hq\n\ndef heap_queue_smallest(nums, n):\n    # Use heapq.nsmallest to get the n smallest elements\n    return hq.nsmallest(n, nums)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nimport math\n\ndef surfacearea_cone(r, h):\n    # Calculate the slant height using Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the base area of the cone\n    base_area = math.pi * r**2\n    \n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r * l\n    \n    # Calculate the total surface area by adding base and lateral areas\n    total_surface_area = base_area + lateral_surface_area\n    \n    return round(total_surface_area, 6)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    # Initialize the gcd variable with the smaller of the two numbers\n    gcd = min(a, b)\n    \n    # Iterate from the gcd down to 1 to find the greatest common divisor\n    while gcd > 0:\n        if a % gcd == 0 and b % gcd == 0:\n            return gcd\n        gcd -= 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\n\ndef diameter_circle(radius):\n    # Calculate the diameter using the formula: 2 * radius\n    return 2 * radius\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\nfrom functools import reduce\n\ndef concatenate_elements(list1):\n    # Use reduce to concatenate elements with spaces\n    result = reduce((lambda x, y: x + \" \" + y), list1)\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\nfrom math import gcd\n\ndef num_comm_div(x, y):\n    # Calculate the greatest common divisor (GCD) of x and y\n    g = gcd(x, y)\n    \n    # Initialize count of divisors\n    result = 0\n    \n    # Iterate through all possible divisors up to the GCD\n    for i in range(1, int(g ** 0.5) + 1):\n        if g % i == 0:\n            # If i is a divisor, increment the count\n            result += 1\n            \n            # If i is not equal to g/i, increment the count again\n            if i != g // i:\n                result += 1\n                \n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x,y):\n    # Calculate the remainder using modulo operator\n    return x % y\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\nfrom itertools import groupby\n\ndef add_consecutive_nums(nums):\n    # Group the consecutive numbers and sum them up\n    return [sum(list(g)) for _, g in groupby(nums)]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    # Calculate the cube sum using the formula (n * (n + 1) / 2)^2\n    return int((n * (n + 1) // 2) ** 2)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\nfrom collections import deque\n\ndef re_order(arr):\n    # Create a deque from the input array\n    arr = deque(arr)\n    \n    # Remove all zeros and store them in a list\n    zero = [arr.popleft() for i in range(arr.count(0))]\n    \n    # Extend the original array with the removed zeros\n    arr.extend(zero)\n    \n    # Return the modified array as a list\n    return list(arr)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\nfrom math import factorial as fact\n\n\ndef permutation_coefficient(n, k):\n    # Calculate n! / (n-k)!\n    return int(fact(n) // fact(n - k))\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\nfrom typing import List\n\ndef remove_words(list1: List[str], word_list: List[str]) -> List[str]:\n    # Use list comprehension to filter out the words in word_list\n    result = [word for word in list1 if word not in word_list]\n    return result\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\nfrom typing import List\n\ndef same_order(list1: List[str], list2: List[str]) -> bool:\n    # Find common elements using set intersection\n    common_elements = list(set(list1) & set(list2))\n    \n    # Filter both lists to only include common elements\n    filtered_list1 = [element for element in list1 if element in common_elements]\n    filtered_list2 = [element for element in list2 if element in common_elements]\n    \n    # Check if the filtered lists have the same order\n    return filtered_list1 == filtered_list2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    # Calculate the sum of odd numbers from 1 to n using the formula for the sum of an arithmetic series\n    Sum = (n + 1) // 2 * ((n + 1) // 2)\n    \n    # Calculate the count of odd numbers from 1 to n\n    Count = (n + 1) // 2\n    \n    # Calculate the average by dividing the sum by the count\n    Average = Sum / Count\n    \n    return Average\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nfrom math import log2\n\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    \n    # Calculate the maximum power of 2 that is less than or equal to k\n    max_power = int(log2(k))\n    \n    # Initialize an array to store the count of subsequences with product <= 2^i\n    dp = [0] * (max_power + 1)\n    dp[0] = 1\n    \n    # Iterate over each element in the array\n    for num in arr:\n        # Update the dp array from right to left\n        for i in range(max_power, -1, -1):\n            if num <= (1 << i):\n                dp[i] += dp[i - 1]\n    \n    # Subtract 1 to exclude the empty subsequence\n    return sum(dp) - 1\n\n# Test the function with the provided test case"]]